=== Структура каталога (ls -a) ===
.
..
directory_structure.txt
.git
Go Developer
Introduction to Git
Introduction to Go
Introduction to Java
Introduction to Kotlin
Introduction to Spring Boot with Java
Introduction to SQL
scr.bash
SQL for Backend Developers

=== Структура каталога (tree -a) ===
.
├── directory_structure.txt
├── .git
│   ├── config
│   ├── description
│   ├── HEAD
│   ├── hooks
│   │   ├── applypatch-msg.sample
│   │   ├── commit-msg.sample
│   │   ├── fsmonitor-watchman.sample
│   │   ├── post-update.sample
│   │   ├── pre-applypatch.sample
│   │   ├── pre-commit.sample
│   │   ├── pre-merge-commit.sample
│   │   ├── prepare-commit-msg.sample
│   │   ├── pre-push.sample
│   │   ├── pre-rebase.sample
│   │   ├── pre-receive.sample
│   │   ├── push-to-checkout.sample
│   │   ├── sendemail-validate.sample
│   │   └── update.sample
│   ├── index
│   ├── info
│   │   └── exclude
│   ├── logs
│   │   ├── HEAD
│   │   └── refs
│   │       ├── heads
│   │       │   └── main
│   │       └── remotes
│   │           └── origin
│   │               └── HEAD
│   ├── objects
│   │   ├── info
│   │   └── pack
│   │       ├── pack-809512aa273e4659d8967465368a080d4ed856a4.idx
│   │       ├── pack-809512aa273e4659d8967465368a080d4ed856a4.pack
│   │       └── pack-809512aa273e4659d8967465368a080d4ed856a4.rev
│   ├── packed-refs
│   └── refs
│       ├── heads
│       │   └── main
│       ├── remotes
│       │   └── origin
│       │       └── HEAD
│       └── tags
├── Go Developer
│   ├── Certificate.pdf
│   └── Challenging
│       ├── Smart Calculator (Go)
│       │   └── main.go
│       └── Version Control System (Go)
│           └── main.go
├── Introduction to Git
│   └── Certificate.pdf
├── Introduction to Go
│   ├── Certificate.pdf
│   └── Hard
│       ├── In-Memory Notepad
│       │   └── main.go
│       ├── Regex Engine (Go)
│       │   └── main.go
│       └── University Admission Procedure (Go)
│           └── main.go
├── Introduction to Java
│   ├── Certificate.pdf
│   ├── Challenging
│   │   └── battleship
│   │       ├── build
│   │       │   └── battleship
│   │       │       ├── FieldBuilder.class
│   │       │       ├── HitChecker.class
│   │       │       ├── Info$Ship.class
│   │       │       ├── Info$TooCloseException.class
│   │       │       ├── Info$WrongCoordinatesException.class
│   │       │       ├── Info$WrongLengthException.class
│   │       │       ├── Info$WrongLocationException.class
│   │       │       ├── Info.class
│   │       │       ├── Main.class
│   │       │       ├── Player.class
│   │       │       └── ShipChecker.class
│   │       ├── FieldBuilder.java
│   │       ├── HitChecker.java
│   │       ├── Info.java
│   │       ├── Main.java
│   │       ├── Player.java
│   │       └── ShipChecker.java
│   ├── Easy
│   │   └── Zookeeper.java
│   ├── Hard
│   │   ├── bullscows
│   │   │   ├── Grader.java
│   │   │   ├── InputAndExceptions.java
│   │   │   ├── Main.java
│   │   │   └── SecretCode.java
│   │   └── machine
│   │       ├── Actions.java
│   │       ├── Coffee.java
│   │       ├── CoffeeMachine.java
│   │       └── .idea
│   │           ├── .gitignore
│   │           ├── misc.xml
│   │           ├── modules.xml
│   │           └── vcs.xml
│   └── Medium
│       ├── Cinema.java
│       └── .idea
│           ├── .gitignore
│           ├── Medium.iml
│           ├── misc.xml
│           ├── modules.xml
│           └── vcs.xml
├── Introduction to Kotlin
│   ├── Certificate.pdf
│   └── Challenging
│       └── Minesweeper (Kotlin)
│           └── Main.kt
├── Introduction to Spring Boot with Java
│   ├── Certificate.pdf
│   ├── Cinema Room REST Service with Java
│   │   ├── build.gradle
│   │   ├── Cinema Room REST Service with Java
│   │   │   ├── A change of plans
│   │   │   │   ├── task.html
│   │   │   │   ├── task-info.yaml
│   │   │   │   └── task-remote-info.yaml
│   │   │   ├── lesson-info.yaml
│   │   │   ├── Take your seat
│   │   │   │   ├── task.html
│   │   │   │   ├── task-info.yaml
│   │   │   │   └── task-remote-info.yaml
│   │   │   ├── task
│   │   │   │   ├── build.gradle
│   │   │   │   ├── src
│   │   │   │   │   ├── cinema
│   │   │   │   │   │   ├── Main.java
│   │   │   │   │   │   └── SeatsController.java
│   │   │   │   │   └── resources
│   │   │   │   │       └── application.properties
│   │   │   │   └── test
│   │   │   │       └── CinemaTests.java
│   │   │   ├── The show begins
│   │   │   │   ├── task.html
│   │   │   │   ├── task-info.yaml
│   │   │   │   └── task-remote-info.yaml
│   │   │   └── The statistics
│   │   │       ├── task.html
│   │   │       ├── task-info.yaml
│   │   │       └── task-remote-info.yaml
│   │   ├── course-info.yaml
│   │   ├── course-remote-info.yaml
│   │   ├── .gitignore
│   │   ├── gradle
│   │   │   └── wrapper
│   │   │       └── gradle-wrapper.properties
│   │   ├── gradlew
│   │   ├── gradlew.bat
│   │   └── settings.gradle
│   └── QRCode Service
│       ├── build.gradle
│       ├── course-info.yaml
│       ├── course-remote-info.yaml
│       ├── .gitignore
│       ├── gradle
│       │   └── wrapper
│       │       └── gradle-wrapper.properties
│       ├── gradlew
│       ├── gradlew.bat
│       ├── QRCode Service
│       │   ├── Basics unveiled
│       │   │   ├── task.html
│       │   │   ├── task-info.yaml
│       │   │   └── task-remote-info.yaml
│       │   ├── First image
│       │   │   ├── task.html
│       │   │   ├── task-info.yaml
│       │   │   └── task-remote-info.yaml
│       │   ├── Foolproof API
│       │   │   ├── task.html
│       │   │   ├── task-info.yaml
│       │   │   └── task-remote-info.yaml
│       │   ├── Image parameters
│       │   │   ├── task.html
│       │   │   ├── task-info.yaml
│       │   │   └── task-remote-info.yaml
│       │   ├── lesson-info.yaml
│       │   ├── task
│       │   │   ├── build.gradle
│       │   │   ├── src
│       │   │   │   ├── qrcodeapi
│       │   │   │   │   ├── Application.java
│       │   │   │   │   └── QRCodeController.java
│       │   │   │   └── resources
│       │   │   │       └── application.properties
│       │   │   └── test
│       │   │       └── QRCodeApiTest.java
│       │   └── Zebra crossing
│       │       ├── task.html
│       │       ├── task-info.yaml
│       │       └── task-remote-info.yaml
│       └── settings.gradle
├── Introduction to SQL
│   └── Certificate.pdf
├── scr.bash
└── SQL for Backend Developers
    ├── Certificate.pdf
    ├── Easy
    │   └── Airline Transportation
    │       ├── Database.sql
    │       ├── query_1.sql
    │       ├── query_2.sql
    │       ├── query_3.sql
    │       ├── query_4.sql
    │       ├── query_5.sql
    │       └── query_6.sql
    └── Medium
        ├── Databases for Sales
        │   ├── Database.sql
        │   ├── query_1.sql
        │   ├── query_2.sql
        │   ├── query_3.sql
        │   └── query_4.sql
        └── Payroll Management Database
            ├── query_1.sql
            ├── query_2.sql
            ├── query_3.sql
            └── query_4.sql

77 directories, 150 files

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/description ===
Unnamed repository; edit this file 'description' to name the repository.

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/applypatch-msg.sample ===
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/commit-msg.sample ===
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/fsmonitor-watchman.sample ===
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/post-update.sample ===
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/pre-applypatch.sample ===
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/pre-commit.sample ===
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/pre-merge-commit.sample ===
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/pre-push.sample ===
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/pre-rebase.sample ===
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/pre-receive.sample ===
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/prepare-commit-msg.sample ===
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/push-to-checkout.sample ===
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/sendemail-validate.sample ===
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/hooks/update.sample ===
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/info/exclude ===
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/refs/heads/main ===
80e885657b022a34b532707c6dc3430e15bc838a

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/refs/remotes/origin/HEAD ===
ref: refs/remotes/origin/main

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/packed-refs ===
# pack-refs with: peeled fully-peeled sorted 
80e885657b022a34b532707c6dc3430e15bc838a refs/remotes/origin/main

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/logs/refs/remotes/origin/HEAD ===
0000000000000000000000000000000000000000 80e885657b022a34b532707c6dc3430e15bc838a gs0xa19f2 <gs0xa19f2@tutamail.com> 1745255811 +0300	clone: from https://github.com/gs0xa19f2/Hyperskill.git

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/logs/refs/heads/main ===
0000000000000000000000000000000000000000 80e885657b022a34b532707c6dc3430e15bc838a gs0xa19f2 <gs0xa19f2@tutamail.com> 1745255811 +0300	clone: from https://github.com/gs0xa19f2/Hyperskill.git

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/logs/HEAD ===
0000000000000000000000000000000000000000 80e885657b022a34b532707c6dc3430e15bc838a gs0xa19f2 <gs0xa19f2@tutamail.com> 1745255811 +0300	clone: from https://github.com/gs0xa19f2/Hyperskill.git

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/HEAD ===
ref: refs/heads/main

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/.git/config ===
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = https://github.com/gs0xa19f2/Hyperskill.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Go Developer/Challenging/Smart Calculator (Go)/main.go ===
package main

import (
	"bufio"
	"fmt"
	"math"
	"os"
	"strconv"
	"strings"
	"unicode"
)

var variables = make(map[string]int)

func main() {
	scanner := bufio.NewScanner(os.Stdin)
	for {
		if !scanner.Scan() {
			break
		}
		line := strings.TrimSpace(scanner.Text())
		if line == "" {
			continue
		}
		if strings.HasPrefix(line, "/") {
			switch line {
			case "/exit":
				fmt.Println("Bye!")
				return
			case "/help":
				fmt.Println("This calculator supports variables and the following operators with their priorities:")
				fmt.Println("  1) Parentheses: ( )")
				fmt.Println("  2) Power: ^")
				fmt.Println("  3) Multiplication and Integer Division: *, /")
				fmt.Println("  4) Addition and Subtraction: +, - (with unary minus as well)")
				fmt.Println("The program is case sensitive for variable names. E.g., BIG != big.")
				continue
			default:
				fmt.Println("Unknown command")
				continue
			}
		}

		if strings.Contains(line, "=") {
			handleAssignment(line)
			continue
		}
		handleExpression(line)
	}
}

func handleAssignment(line string) {
	parts := strings.Split(line, "=")
	if len(parts) != 2 {
		fmt.Println("Invalid assignment")
		return
	}
	left := strings.TrimSpace(parts[0])
	right := strings.TrimSpace(parts[1])
	if !isValidIdentifier(left) {
		fmt.Println("Invalid identifier")
		return
	}
	if !isValidAssignmentValue(right) {
		fmt.Println("Invalid assignment")
		return
	}
	val, err := parseAssignmentValue(right)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	variables[left] = val
}

func handleExpression(line string) {
	tokens, err := tokenize(line)
	if err != nil {
		fmt.Println("Invalid expression")
		return
	}
	postfix, convErr := infixToPostfix(tokens)
	if convErr != nil {
		fmt.Println("Invalid expression")
		return
	}
	result, evalErr := evaluatePostfix(postfix)
	if evalErr != nil {
		if evalErr.Error() == "Unknown variable" {
			fmt.Println("Unknown variable")
		} else {
			fmt.Println("Invalid expression")
		}
		return
	}
	fmt.Println(result)
}

func isValidIdentifier(s string) bool {
	if len(s) == 0 {
		return false
	}
	for _, r := range s {
		if !unicode.IsLetter(r) {
			return false
		}
	}
	return true
}

func isValidAssignmentValue(s string) bool {
	if len(s) == 0 {
		return false
	}
	if isValidIdentifier(s) {
		return true
	}
	if isInteger(s) {
		return true
	}
	return false
}

func parseAssignmentValue(s string) (int, error) {
	if isInteger(s) {
		val, _ := strconv.Atoi(s)
		return val, nil
	}
	if isValidIdentifier(s) {
		v, ok := variables[s]
		if !ok {
			return 0, fmt.Errorf("Unknown variable")
		}
		return v, nil
	}
	return 0, fmt.Errorf("Invalid assignment")
}

func isInteger(s string) bool {
	if s == "" {
		return false
	}
	if s[0] == '+' || s[0] == '-' {
		if len(s) == 1 {
			return false
		}
		s = s[1:]
	}
	for _, r := range s {
		if r < '0' || r > '9' {
			return false
		}
	}
	return true
}

func tokenize(line string) ([]string, error) {
	var tokens []string
	var current strings.Builder
	for i := 0; i < len(line); i++ {
		ch := rune(line[i])
		switch {
		case unicode.IsSpace(ch):
			if current.Len() > 0 {
				tokens = append(tokens, current.String())
				current.Reset()
			}
		case ch == '(' || ch == ')':
			if current.Len() > 0 {
				tokens = append(tokens, current.String())
				current.Reset()
			}
			tokens = append(tokens, string(ch))
		case ch == '+' || ch == '-':
			if current.Len() > 0 {
				tokens = append(tokens, current.String())
				current.Reset()
			}
			var seq string
			seq += string(ch)
			for j := i + 1; j < len(line); j++ {
				if line[j] == '+' || line[j] == '-' {
					seq += string(line[j])
					i = j
				} else {
					break
				}
			}
			tokens = append(tokens, seq)
		case ch == '*' || ch == '/' || ch == '^':
			if current.Len() > 0 {
				tokens = append(tokens, current.String())
				current.Reset()
			}
			count := 1
			for j := i + 1; j < len(line); j++ {
				if rune(line[j]) == ch {
					count++
					i = j
				} else {
					break
				}
			}
			if count > 1 {
				return nil, fmt.Errorf("invalid")
			}
			tokens = append(tokens, string(ch))
		case unicode.IsDigit(ch) || unicode.IsLetter(ch):
			current.WriteRune(ch)
		default:
			return nil, fmt.Errorf("invalid")
		}
	}
	if current.Len() > 0 {
		tokens = append(tokens, current.String())
	}
	return tokens, nil
}

func infixToPostfix(tokens []string) ([]string, error) {
	var stack []string
	var output []string
	for i := 0; i < len(tokens); i++ {
		token := tokens[i]
		switch {
		case isValidIdentifier(token) || isInteger(token):
			output = append(output, token)
		case isPlusOrMinusSeq(token):
			op := simplifyPlusMinus(token)
			for len(stack) > 0 {
				top := stack[len(stack)-1]
				if top == "(" {
					break
				}
				if priority(top) >= priority(op) {
					output = append(output, top)
					stack = stack[:len(stack)-1]
				} else {
					break
				}
			}
			stack = append(stack, op)
		case token == "*" || token == "/" || token == "^":
			for len(stack) > 0 {
				top := stack[len(stack)-1]
				if top == "(" {
					break
				}
				if priority(top) >= priority(token) {
					output = append(output, top)
					stack = stack[:len(stack)-1]
				} else {
					break
				}
			}
			stack = append(stack, token)
		case token == "(":
			stack = append(stack, token)
		case token == ")":
			foundLeftParen := false
			for len(stack) > 0 {
				top := stack[len(stack)-1]
				stack = stack[:len(stack)-1]
				if top == "(" {
					foundLeftParen = true
					break
				}
				output = append(output, top)
			}
			if !foundLeftParen {
				return nil, fmt.Errorf("mismatched parentheses")
			}
		default:
			return nil, fmt.Errorf("invalid token")
		}
	}
	for len(stack) > 0 {
		top := stack[len(stack)-1]
		stack = stack[:len(stack)-1]
		if top == "(" || top == ")" {
			return nil, fmt.Errorf("mismatched parentheses")
		}
		output = append(output, top)
	}
	return output, nil
}

func evaluatePostfix(postfix []string) (int, error) {
	var stack []int
	for _, token := range postfix {
		switch {
		case isValidIdentifier(token):
			val, ok := variables[token]
			if !ok {
				return 0, fmt.Errorf("Unknown variable")
			}
			stack = append(stack, val)
		case isInteger(token):
			val, _ := strconv.Atoi(token)
			stack = append(stack, val)
		case token == "+" || token == "-" || token == "*" || token == "/" || token == "^":
			if len(stack) < 2 {
				return 0, fmt.Errorf("error")
			}
			b := stack[len(stack)-1]
			a := stack[len(stack)-2]
			stack = stack[:len(stack)-2]
			switch token {
			case "+":
				stack = append(stack, a+b)
			case "-":
				stack = append(stack, a-b)
			case "*":
				stack = append(stack, a*b)
			case "/":
				if b == 0 {
					return 0, fmt.Errorf("division by zero")
				}
				stack = append(stack, a/b)
			case "^":
				powVal := math.Pow(float64(a), float64(b))
				stack = append(stack, int(powVal))
			}
		default:
			return 0, fmt.Errorf("error")
		}
	}
	if len(stack) != 1 {
		return 0, fmt.Errorf("error")
	}
	return stack[0], nil
}

func isPlusOrMinusSeq(token string) bool {
	for _, r := range token {
		if r != '+' && r != '-' {
			return false
		}
	}
	return len(token) > 0
}

func simplifyPlusMinus(seq string) string {
	minusCount := 0
	for _, r := range seq {
		if r == '-' {
			minusCount++
		}
	}
	if minusCount%2 == 0 {
		return "+"
	}
	return "-"
}

func priority(op string) int {
	switch op {
	case "^":
		return 4
	case "*", "/":
		return 3
	case "+", "-":
		return 2
	}
	return 0
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Go Developer/Challenging/Version Control System (Go)/main.go ===
package main

import (
	"crypto/sha256"
	"fmt"
	"log"
	"os"
	"strings"
)

var commandToDescription = map[string]string{
	"config":   "Get and set a username.",
	"add":      "Add a file to the index.",
	"log":      "Show commit logs.",
	"commit":   "Save changes.",
	"checkout": "Restore a file.",
}

var commandOrder = []string{"config", "add", "log", "commit", "checkout"}

func setupVCS() error {
	directories := []string{"./vcs", "./vcs/commits"}
	files := []string{"./vcs/index.txt", "./vcs/config.txt", "./vcs/log.txt"}

	for _, dir := range directories {
		if err := os.MkdirAll(dir, os.ModePerm); err != nil && !os.IsExist(err) {
			return err
		}
	}

	for _, file := range files {
		if _, err := os.Stat(file); os.IsNotExist(err) {
			if f, err := os.Create(file); err == nil {
				if closeErr := f.Close(); closeErr != nil {
					return closeErr
				}
			} else {
				return err
			}
		}
	}
	return nil
}

func getCommandDescription(command string) {
	if description, exists := commandToDescription[command]; exists {
		fmt.Println(description)
	} else {
		fmt.Printf("'%s' is not a SVCS command.\n", command)
	}
}

func processCommand(args []string) {
	switch cmd := args[0]; cmd {
	case "config":
		handleConfig(args)
	case "add":
		handleAdd(args)
	case "log":
		handleLog()
	case "commit":
		handleCommit(args)
	case "checkout":
		handleCheckout(args)
	default:
		getCommandDescription(cmd)
	}
}

func handleConfig(args []string) {
	content, _ := os.ReadFile("./vcs/config.txt")
	if len(args) == 1 {
		if len(content) == 0 {
			fmt.Println("Please, tell me who you are.")
		} else {
			fmt.Printf("The username is %s.\n", strings.TrimSpace(string(content)))
		}
	} else {
		err := os.WriteFile("./vcs/config.txt", []byte(args[1]), 0644)
		if err != nil {
			return
		}
		fmt.Printf("The username is %s.\n", args[1])
	}
}

func handleAdd(args []string) {
	content, _ := os.ReadFile("./vcs/index.txt")
	if len(args) == 1 {
		if len(content) == 0 {
			fmt.Println("Add a file to the index.")
		} else {
			fmt.Printf("Tracked files:\n%s", string(content))
		}
	} else {
		if _, err := os.Stat(args[1]); os.IsNotExist(err) {
			fmt.Printf("Can't find '%s'.\n", args[1])
			return
		}
		f, _ := os.OpenFile("./vcs/index.txt", os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0644)
		defer func(f *os.File) {
			_ = f.Close()
		}(f)
		_, err := f.WriteString(args[1] + "\n")
		if err != nil {
			return
		}
		fmt.Printf("The file '%s' is tracked.\n", args[1])
	}
}

func handleLog() {
	content, _ := os.ReadFile("./vcs/log.txt")
	if len(content) == 0 {
		fmt.Println("No commits yet.")
		return
	}

	blocks := strings.Split(strings.TrimSpace(string(content)), "\n\n")
	for i, j := 0, len(blocks)-1; i < j; i, j = i+1, j-1 {
		blocks[i], blocks[j] = blocks[j], blocks[i]
	}

	fmt.Println(strings.Join(blocks, "\n\n"))
}

func handleCommit(args []string) {
	if len(args) < 2 {
		fmt.Println("Message was not passed.")
		return
	}

	indexContent, _ := os.ReadFile("./vcs/index.txt")
	if len(indexContent) == 0 {
		fmt.Println("Nothing to commit.")
		return
	}

	trackedFiles := strings.Split(strings.TrimSpace(string(indexContent)), "\n")
	hasChanges, err := detectChanges(trackedFiles)
	if err != nil {
		fmt.Printf("Error while detecting changes: %v\n", err)
		return
	}

	if !hasChanges {
		fmt.Println("Nothing to commit.")
		return
	}

	commitID := generateCommitID()
	commitDir := fmt.Sprintf("./vcs/commits/%s", commitID)

	if err := os.MkdirAll(commitDir, os.ModePerm); err != nil {
		fmt.Printf("Error creating commit directory: %v\n", err)
		return
	}

	for _, file := range trackedFiles {
		data, err := os.ReadFile(file)
		if err != nil {
			fmt.Printf("Error reading file '%s': %v\n", file, err)
			return
		}

		destFile := fmt.Sprintf("%s/%s", commitDir, file)
		if err := os.MkdirAll(strings.TrimSuffix(destFile, "/"+file), os.ModePerm); err != nil {
			fmt.Printf("Error creating subdirectory for '%s': %v\n", file, err)
			return
		}

		err = os.WriteFile(destFile, data, 0644)
		if err != nil {
			fmt.Printf("Error writing file '%s': %v\n", destFile, err)
			return
		}
	}

	if err := writeLogEntry(commitID, args[1:]); err != nil {
		fmt.Printf("Error writing to log file: %v\n", err)
		return
	}

	fmt.Println("Changes are committed.")
}

func detectChanges(trackedFiles []string) (bool, error) {
	lastCommitDir := getLastCommitDir()
	if lastCommitDir == "" {
		return true, nil
	}

	for _, file := range trackedFiles {
		data, err := os.ReadFile(file)
		if err != nil {
			return false, err
		}
		newHash := fmt.Sprintf("%x", sha256.Sum256(data))

		oldData, err := os.ReadFile(fmt.Sprintf("%s/%s", lastCommitDir, file))
		if err != nil {
			return true, nil
		}
		oldHash := fmt.Sprintf("%x", sha256.Sum256(oldData))

		if newHash != oldHash {
			return true, nil
		}
	}
	return false, nil
}

func getLastCommitDir() string {
	content, _ := os.ReadFile("./vcs/log.txt")
	if len(content) == 0 {
		return ""
	}

	blocks := strings.Split(strings.TrimSpace(string(content)), "\n\n")
	if len(blocks) == 0 {
		return ""
	}

	lastBlock := blocks[len(blocks)-1]
	lines := strings.Split(lastBlock, "\n")

	if len(lines) > 0 && strings.HasPrefix(lines[0], "commit ") {
		commitID := strings.TrimSpace(strings.TrimPrefix(lines[0], "commit "))
		return "./vcs/commits/" + commitID
	}

	return ""
}

func generateCommitID() string {
	return fmt.Sprintf("%x", sha256.Sum256([]byte(fmt.Sprintf("%d", os.Getpid()+os.Getuid()+os.Geteuid()))))[:40]
}

func writeLogEntry(commitID string, messageParts []string) error {
	f, err := os.OpenFile("./vcs/log.txt", os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer func(f *os.File) {
		err := f.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(f)

	username, _ := os.ReadFile("./vcs/config.txt")
	logMessage := fmt.Sprintf("commit %s\nAuthor: %s\n%s\n\n", commitID, strings.TrimSpace(string(username)),
		strings.Join(messageParts, " "))
	if _, err := f.WriteString(logMessage); err != nil {
		return err
	}
	return nil
}

func handleCheckout(args []string) {
	if len(args) < 2 {
		fmt.Println("Commit id was not passed.")
		return
	}

	commitID := args[1]
	commitDir := fmt.Sprintf("./vcs/commits/%s", commitID)

	if _, err := os.Stat(commitDir); os.IsNotExist(err) {
		fmt.Println("Commit does not exist.")
		return
	}

	files, err := os.ReadDir(commitDir)
	if err != nil {
		fmt.Printf("Error reading commit directory: %v\n", err)
		return
	}

	for _, file := range files {
		srcFile := fmt.Sprintf("%s/%s", commitDir, file.Name())
		destFile := fmt.Sprintf("./%s", file.Name())

		if err := os.Remove(destFile); err != nil && !os.IsNotExist(err) {
			fmt.Printf("Error removing file '%s': %v\n", destFile, err)
			return
		}

		if err := os.Rename(srcFile, destFile); err != nil {
			fmt.Printf("Error restoring file '%s': %v\n", destFile, err)
			return
		}
	}

	fmt.Printf("Switched to commit %s.\n", commitID)
}

func main() {
	if err := setupVCS(); err != nil {
		log.Fatal(err)
	}

	args := os.Args[1:]
	if len(args) == 0 || args[0] == "--help" {
		fmt.Println("These are SVCS commands:")
		for _, cmd := range commandOrder {
			fmt.Printf("%-10s %s\n", cmd, commandToDescription[cmd])
		}
	} else {
		processCommand(args)
	}
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Go/Hard/In-Memory Notepad/main.go ===
package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func main() {
	scanner := bufio.NewScanner(os.Stdin)

	fmt.Print("Enter the maximum number of notes: ")
	if !scanner.Scan() {
		return
	}
	maxInput := strings.TrimSpace(scanner.Text())
	maxSize, err := strconv.Atoi(maxInput)
	if err != nil || maxSize < 1 {
		return
	}

	notes := make([]string, 0, maxSize)

	for {
		fmt.Print("\nEnter a command and data: ")
		if !scanner.Scan() {
			return
		}
		input := scanner.Text()
		parts := strings.SplitN(input, " ", 2)
		command := parts[0]
		data := ""
		if len(parts) > 1 {
			data = strings.TrimSpace(parts[1])
		}

		switch command {
		case "exit":
			fmt.Println("[Info] Bye!")
			return

		case "create":
			if data == "" {
				fmt.Println("[Error] Missing note argument")
				continue
			}
			if len(notes) < maxSize {
				notes = append(notes, data)
				fmt.Println("[OK] The note was successfully created")
			} else {
				fmt.Println("[Error] Notepad is full")
			}

		case "list":
			if len(notes) == 0 {
				fmt.Println("[Info] Notepad is empty")
				continue
			}
			for i, note := range notes {
				fmt.Printf("[Info] %d: %s\n", i+1, note)
			}

		case "clear":
			notes = notes[:0]
			fmt.Println("[OK] All notes were successfully deleted")

		case "update":
			if data == "" {
				fmt.Println("[Error] Missing position argument")
				continue
			}
			updateParts := strings.SplitN(data, " ", 2)
			if len(updateParts) < 2 {
				if len(updateParts[0]) == 0 {
					fmt.Println("[Error] Missing position argument")
				} else {
					fmt.Println("[Error] Missing note argument")
				}
				continue
			}
			posStr, noteText := updateParts[0], updateParts[1]
			pos, convErr := strconv.Atoi(posStr)
			if convErr != nil {
				fmt.Printf("[Error] Invalid position: %s\n", posStr)
				continue
			}
			if pos < 1 || pos > maxSize {
				fmt.Printf("[Error] Position %d is out of the boundaries [1, %d]\n", pos, maxSize)
				continue
			}
			if pos > len(notes) {
				fmt.Println("[Error] There is nothing to update")
				continue
			}
			notes[pos-1] = noteText
			fmt.Printf("[OK] The note at position %d was successfully updated\n", pos)

		case "delete":
			if data == "" {
				fmt.Println("[Error] Missing position argument")
				continue
			}
			pos, convErr := strconv.Atoi(data)
			if convErr != nil {
				fmt.Printf("[Error] Invalid position: %s\n", data)
				continue
			}
			if pos < 1 || pos > maxSize {
				fmt.Printf("[Error] Position %d is out of the boundaries [1, %d]\n", pos, maxSize)
				continue
			}
			if pos > len(notes) {
				fmt.Println("[Error] There is nothing to delete")
				continue
			}
			notes = append(notes[:pos-1], notes[pos:]...)
			fmt.Printf("[OK] The note at position %d was successfully deleted\n", pos)

		default:
			if command == "" {
				continue
			}
			fmt.Println("[Error] Unknown command")
		}
	}
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Go/Hard/Regex Engine (Go)/main.go ===
package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

var metaCharWasMet bool

func ParseRegex(regex string) (string, bool, bool) {
	isStartAnchored := false
	isEndAnchored := false

	if len(regex) > 0 && regex[0] == '^' {
		isStartAnchored = true
		regex = regex[1:]
	}
	if len(regex) > 1 && regex[len(regex)-1] == '$' && regex[len(regex)-2] != '\\' {
		isEndAnchored = true
		regex = regex[:len(regex)-1]
	}
	return regex, isStartAnchored, isEndAnchored
}

func DetectRepetitions(regex string, isEndAnchored bool) (rune, rune, rune) {
	if len(regex) <= 1 {
		return -1, -1, -1
	}
	index, shiftToBorder := 1, 1
	if isEndAnchored {
		index, shiftToBorder = len(regex)-1, -2
	}
	metacharacters := regex[index] == '?' || regex[index] == '*' || regex[index] == '+'
	switch {
	case len(regex) > 2 && metacharacters:
		// * / + / ?, which rune we repeat and the border rune
		return rune(regex[index]), rune(regex[index-1]), rune(regex[index+shiftToBorder])
	case metacharacters:
		// * / + / ?, which rune we repeat and the dummy border rune
		return rune(regex[index]), rune(regex[index-1]), -1
	default:
		return -1, -1, -1
	}
}

func ProcessRepetitions(regex, word string, isEndAnchored bool) (string, string) {
	metacharacter, repeatedRune, borderRune := DetectRepetitions(regex, isEndAnchored)
	if metacharacter == -1 || len(word) == 0 {
		return regex, word
	}

	if repeatedRune != '\\' {
		metaCharWasMet = true
	} else {
		return regex, word
	}

	shiftWord, shiftRegex, wordIndex := 0, 0, 0
	if isEndAnchored {
		shiftWord, shiftRegex, wordIndex = 1, 2, len(word)-1
	}
	switch metacharacter {
	case '?':
		if repeatedRune == rune(word[wordIndex]) || repeatedRune == '.' {
			return ProcessRepetitions(regex[2-shiftRegex:len(regex)-shiftRegex],
				word[1-shiftWord:len(word)-shiftWord], isEndAnchored)
		} else {
			return ProcessRepetitions(regex[2-shiftRegex:len(regex)-shiftRegex], word, isEndAnchored)
		}
	case '*', '+':
		regex, word = MultipleRepInPlace(regex, word, string([]rune{metacharacter, repeatedRune, borderRune}),
			shiftWord, shiftRegex, isEndAnchored)
		return ProcessRepetitions(regex, word, isEndAnchored)
	default:
		return regex, word
	}
}

func MultipleRepInPlace(regex, word, mrb string, shiftWord, shiftRegex int, isEndAnchored bool) (string, string) {
	metacharacter := rune(mrb[0])
	repeatedRune := rune(mrb[1])
	borderRune := rune(mrb[2])
	metOnce := false
	for {
		if len(word) == 0 {
			break
		}
		wordIndex := 0
		if isEndAnchored {
			wordIndex = len(word) - 1
		}
		if (repeatedRune == rune(word[wordIndex]) || repeatedRune == '.') && rune(word[wordIndex]) != borderRune {
			metOnce = true
			word = word[1-shiftWord : len(word)-shiftWord]
		} else {
			break
		}
	}
	if metacharacter == '+' && !metOnce {
		return "dummy", ""
	}
	return regex[2-shiftRegex : len(regex)-shiftRegex], word
}

func processEscapeSequences(regex, word string, isEndAnchored bool) (string, string) {
	escapedIndex, sliceIndex, wordIndex := 1, 0, 0
	if isEndAnchored {
		escapedIndex, wordIndex, sliceIndex = len(regex)-1, len(word)-1, 1
	}
	if len(regex) <= 1 || regex[escapedIndex-1] != '\\' {
		return regex, word
	}
	if rune(regex[escapedIndex]) == rune(word[wordIndex]) {
		return regex[2-2*sliceIndex : len(regex)-2*sliceIndex], word[1-sliceIndex : len(word)-sliceIndex]
	} else {
		return regex, word
	}
}

func compareStrings(regex, word string, isStartAnchored, isEndAnchored bool) bool {
	if len(regex) == 0 {
		return !(isStartAnchored && isEndAnchored && len(word) > 0)
	}
	if len(word) == 0 {
		return false
	}
	regex, word = processEscapeSequences(regex, word, isEndAnchored)
	regex, word = ProcessRepetitions(regex, word, isEndAnchored)
	if len(regex) == 0 {
		return !(isStartAnchored && isEndAnchored && len(word) > 0)
	}
	if len(word) == 0 {
		return false
	}
	if isEndAnchored && (regex[len(regex)-1] == '.' || (len(word) > 0 && regex[len(regex)-1] == word[len(word)-1])) {
		return compareStrings(regex[:len(regex)-1], word[:len(word)-1], isStartAnchored, isEndAnchored)
	}

	if !isEndAnchored && (regex[0] == '.' || (len(word) > 0 && regex[0] == word[0])) {
		return compareStrings(regex[1:], word[1:], isStartAnchored, isEndAnchored)
	}
	if isStartAnchored || isEndAnchored || metaCharWasMet {
		return false
	}
	if len(word) > 1 {
		return compareStrings(regex, word[1:], false, false)
	}
	return false
}

func main() {
	reader := bufio.NewReader(os.Stdin)
	raw, err := reader.ReadString('\n')
	if err != nil {
		return
	}
	parts := strings.Split(strings.TrimSpace(raw), "|")
	regex, word := parts[0], parts[1]
	parsedRegex, isStartAnchored, isEndAnchored := ParseRegex(regex)
	switch {
	case regex == "":
		fmt.Println(true)
	case word == "":
		fmt.Println(false)
	default:
		fmt.Println(compareStrings(parsedRegex, word, isStartAnchored, isEndAnchored))
	}
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Go/Hard/University Admission Procedure (Go)/main.go ===
package main

import (
	"bufio"
	"fmt"
	"log"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
)

type Student struct {
	fullName             string
	exams                map[string]float64
	specialAdmissionExam float64
	departments          []string
}

type Department struct {
	name             string
	enrolledStudents []Student
}

func parseStudent(line string) (Student, error) {
	parts := strings.Fields(line)
	if len(parts) < 9 {
		return Student{}, fmt.Errorf("invalid student line format")
	}

	fullName := parts[0] + " " + parts[1]

	physics, err := strconv.ParseFloat(parts[2], 64)
	if err != nil {
		return Student{}, fmt.Errorf("invalid physics score: %v", err)
	}
	chemistry, err := strconv.ParseFloat(parts[3], 64)
	if err != nil {
		return Student{}, fmt.Errorf("invalid chemistry score: %v", err)
	}
	math, err := strconv.ParseFloat(parts[4], 64)
	if err != nil {
		return Student{}, fmt.Errorf("invalid math score: %v", err)
	}
	cs, err := strconv.ParseFloat(parts[5], 64)
	if err != nil {
		return Student{}, fmt.Errorf("invalid computer science score: %v", err)
	}
	specialAdmissionExam, err := strconv.ParseFloat(parts[6], 64)
	if err != nil {
		return Student{}, fmt.Errorf("invalid special admission exam score: %v", err)
	}

	departments := parts[7:10]

	return Student{
		fullName: fullName,
		exams: map[string]float64{
			"physics":          physics,
			"chemistry":        chemistry,
			"math":             math,
			"computer science": cs,
		},
		specialAdmissionExam: specialAdmissionExam,
		departments:          departments,
	}, nil
}

func sortStudents(students []Student, exams []string) {
	sort.Slice(students, func(i, j int) bool {
		avgI, avgJ := 0.0, 0.0
		for _, exam := range exams {
			avgI += students[i].exams[exam]
			avgJ += students[j].exams[exam]
		}
		avgI = math.Max(avgI/float64(len(exams)), students[i].specialAdmissionExam)
		avgJ = math.Max(avgJ/float64(len(exams)), students[j].specialAdmissionExam)

		if avgI != avgJ {
			return avgI > avgJ
		}
		return students[i].fullName < students[j].fullName
	})
}

func calculateAverage(student Student, exams []string) float64 {
	sum := 0.0
	for _, exam := range exams {
		sum += student.exams[exam]
	}
	return sum / float64(len(exams))
}

func main() {
	var departmentCapacity int
	_, err := fmt.Scan(&departmentCapacity)
	if err != nil {
		log.Fatal(err)
	}

	file, err := os.Open("applicants.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer func(file *os.File) {
		err := file.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(file)

	var applicants []Student
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		student, err := parseStudent(scanner.Text())
		if err != nil {
			log.Fatal(err)
		}
		applicants = append(applicants, student)
	}

	departments := map[string]*Department{
		"Biotech":     {name: "Biotech"},
		"Chemistry":   {name: "Chemistry"},
		"Engineering": {name: "Engineering"},
		"Mathematics": {name: "Mathematics"},
		"Physics":     {name: "Physics"},
	}

	departmentsToExams := map[string][]string{
		"Biotech":     {"chemistry", "physics"},
		"Chemistry":   {"chemistry"},
		"Physics":     {"physics", "math"},
		"Mathematics": {"math"},
		"Engineering": {"computer science", "math"},
	}

	remaining := make([]Student, len(applicants))
	copy(remaining, applicants)

	for priority := 0; priority < 3; priority++ {
		deptOrder := []string{"Biotech", "Chemistry", "Engineering", "Mathematics", "Physics"}
		for _, deptName := range deptOrder {
			dept := departments[deptName]
			var candidates []Student
			for _, s := range remaining {
				if s.departments[priority] == deptName {
					candidates = append(candidates, s)
				}
			}
			exams := departmentsToExams[deptName]
			sortStudents(candidates, exams)

			availableSpots := departmentCapacity - len(dept.enrolledStudents)
			if availableSpots <= 0 {
				continue
			}
			numToTake := availableSpots
			if len(candidates) < numToTake {
				numToTake = len(candidates)
			}
			enrolling := candidates[:numToTake]

			dept.enrolledStudents = append(dept.enrolledStudents, enrolling...)

			enrolledSet := make(map[string]struct{})
			for _, s := range enrolling {
				enrolledSet[s.fullName] = struct{}{}
			}
			var newRemaining []Student
			for _, s := range remaining {
				if _, ok := enrolledSet[s.fullName]; !ok {
					newRemaining = append(newRemaining, s)
				}
			}
			remaining = newRemaining
		}
	}

	for deptName, dept := range departments {
		exams := departmentsToExams[deptName]
		sortStudents(dept.enrolledStudents, exams)
		filename := strings.ToLower(deptName) + ".txt"
		file, err := os.Create(filename)
		if err != nil {
			log.Fatal(err)
		}
		defer func(file *os.File) {
			err := file.Close()
			if err != nil {
				log.Fatal(err)
			}
		}(file)

		for _, s := range dept.enrolledStudents {
			avg := calculateAverage(s, exams)
			line := fmt.Sprintf("%s %.1f\n", s.fullName, math.Max(avg, s.specialAdmissionExam))
			_, err := file.WriteString(line)
			if err != nil {
				log.Fatal(err)
			}
		}
	}
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Challenging/battleship/FieldBuilder.java ===
package battleship;

public class FieldBuilder {

    public static final int NUMBER_DIFF_FROM_ONE_TO_A = 64;

    public static String[][] buildEmptyField() {
        String[][] field = new String[11][11];
        for (int i = 0; i < 11; i++) {
            for (int j = 0; j < 11; j++) {
                if (i == 0 && j == 0) {
                    field[i][j] = " ";
                } else if (i == 0) {
                    field[i][j] = String.valueOf(j);
                } else if (j == 0) {
                    field[i][j] = (char) (i + NUMBER_DIFF_FROM_ONE_TO_A) + "";
                } else {
                    field[i][j] = "~";
                }
            }
        }
        return field;
    }

    public static void showField(String[][] field) {
        for (int i = 0; i < 11; i++) {
            for (int j = 0; j < 11; j++) {
                System.out.print(field[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Challenging/battleship/HitChecker.java ===
package battleship;

import static battleship.Info.*;
import static battleship.ShipChecker.*;

import java.util.Arrays;
import java.util.Objects;

public class HitChecker {
    public static void recordTheShot(int[] coordinates, Player player) {
        for (Ship ship : player.ships) {
            for (int[] shipCoordinates : ship.getCoordinates()) {
                if (ship.isShipDown()) {
                    break;
                }
                if (Arrays.equals(coordinates, shipCoordinates)) {
                    ship.increaseNumOfHitCoordinatesByOne();
                    checkShip(ship);
                    if (!ship.isShipDown()) {
                        System.out.println(hit);
                    } else {
                        player.increaseNumOfDownShipsByOne();
                        if (player.getNumOfDownShips() != 5) {
                            System.out.println(shipIsDown);
                        }
                    }
                }
            }
        }
    }

    public static void takeAShot(int[] coordinates, String[][] field, String[][] fogField, Player player) {
        if (Objects.equals(field[coordinates[0]][coordinates[1]], "O")) {
            field[coordinates[0]][coordinates[1]] = "X";
            fogField[coordinates[0]][coordinates[1]] = "X";
            recordTheShot(coordinates, player);
        } else if (Objects.equals(field[coordinates[0]][coordinates[1]], "X")) {
            System.out.println(hit);
        } else {
            field[coordinates[0]][coordinates[1]] = "M";
            fogField[coordinates[0]][coordinates[1]] = "M";
            System.out.println(miss);
        }
    }

}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Challenging/battleship/Info.java ===
package battleship;

import java.io.IOException;

public class Info {
    public static String hit = "You hit a ship!";
    public static String miss = "You missed!";
    public static String shipIsDown = "You sank a ship!";
    public static String allShipsDown = "You sank the last ship. You won. Congratulations!";

    public static class Ship {
        private final String message;
        private final int length;
        private int[][] coordinates;
        private boolean isShipDown = false;
        private int NumOfHitCoordinates = 0;


        Ship(String message, int length) {
            this.message = message;
            this.length = length;
        }

        public String getMessage() {
            return message;
        }

        public int getLength() {
            return length;
        }

        public int[][] getCoordinates() {
            return coordinates;
        }

        public void setCoordinates(int[][] coordinates) {
            this.coordinates = coordinates;
        }

        public boolean isShipDown() {
            return isShipDown;
        }

        public void setShipDown() {
            isShipDown = true;
        }

        public int getNumOfHitCoordinates() {
            return NumOfHitCoordinates;
        }

        public void increaseNumOfHitCoordinatesByOne() {
            NumOfHitCoordinates++;
        }
    }

    static class WrongLengthException extends RuntimeException {
        public WrongLengthException() {
            super("Error! Wrong length of the Submarine! Try again:");
        }
    }

    static class WrongLocationException extends RuntimeException {
        public WrongLocationException() {
            super("Error! Wrong ship location! Try again:");
        }
    }

    static class TooCloseException extends RuntimeException {
        public TooCloseException() {
            super("Error! You placed it too close to another one. Try again:");
        }
    }

    static class WrongCoordinatesException extends RuntimeException {
        public WrongCoordinatesException() {
            super("Error! You entered the wrong coordinates! Try again:");
        }
    }

    public static void promptEnterKey() {
        System.out.println("Press Enter and pass the move to another player");
        try {
            int read = System.in.read();
        } catch (IOException e) {
            e.getMessage();
        } finally {
            System.out.print("\033[H\033[2J");
            System.out.flush();
        }
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Challenging/battleship/Main.java ===
package battleship;

import java.util.Scanner;

import static battleship.Info.*;

public class Main {

    public static void main(String[] args) {
        var scanner = new Scanner(System.in);
        Player playerOne = new Player("Player 1");
        Player playerTwo = new Player("Player 2");
        playerOne.placeTheShips(scanner);
        playerTwo.placeTheShips(scanner);
        while (playerOne.getNumOfDownShips() != 5 || playerTwo.getNumOfDownShips() != 5) {
            playerOne.takeTurn(playerTwo, scanner);
            if (playerTwo.getNumOfDownShips() == 5) {
                System.out.println(allShipsDown);
            } else {
                playerTwo.takeTurn(playerOne, scanner);
            }
        }
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Challenging/battleship/Player.java ===
package battleship;

import battleship.Info.Ship;

import java.util.Scanner;

import static battleship.FieldBuilder.*;
import static battleship.HitChecker.takeAShot;
import static battleship.Info.allShipsDown;
import static battleship.ShipChecker.*;
import static battleship.Info.promptEnterKey;

public class Player {
    Ship airCraftCarrier = new Ship("Enter the coordinates of the Aircraft Carrier (5 cells):", 5);
    Ship battleship = new Ship("Enter the coordinates of the Battleship (4 cells):", 4);
    Ship submarine = new Ship("Enter the coordinates of the Submarine (3 cells):", 3);
    Ship cruiser = new Ship("Enter the coordinates of the Cruiser (3 cells):", 3);
    Ship destroyer = new Ship("Enter the coordinates of the Destroyer (2 cells):", 2);
    Ship[] ships = new Ship[]{airCraftCarrier, battleship, submarine, cruiser, destroyer};
    String[][] field = buildEmptyField();
    String[][] fogField = buildEmptyField();
    String playerName;
    private int NumOfDownShips = 0;

    public int getNumOfDownShips() {
        return NumOfDownShips;
    }

    public void increaseNumOfDownShipsByOne() {
        NumOfDownShips++;
    }

    Player(String playerName) {
        this.playerName = playerName;
    }

    void placeTheShips(Scanner scanner) {
        System.out.printf("%s, place your ships on the game field\n", playerName);
        boolean hasErrorOccurred;
        for (Ship ship : ships) {
            showField(field);
            System.out.println(ship.getMessage());
            do {
                try {
                    int[][] coordinates = getCoordinatesFromLine(scanner.nextLine());
                    int[] firstCoordinates = coordinates[0];
                    int[] secondCoordinates = coordinates[1];
                    placeShip(field, firstCoordinates, secondCoordinates, ship);
                    hasErrorOccurred = false;
                } catch (RuntimeException e) {
                    System.out.println(e.getMessage());
                    hasErrorOccurred = true;
                }
            } while (hasErrorOccurred);
        }
        showField(field);
        promptEnterKey();
    }

    void takeTurn(Player opponent, Scanner scanner) {
        showField(opponent.fogField);
        System.out.print("---------------------\n");
        showField(this.field);
        System.out.printf("%s, it's your turn:\n", this.playerName);
        try {
            takeAShot(getCoordinates(scanner.nextLine()), opponent.field, opponent.fogField, opponent);
        } catch (RuntimeException e) {
            System.out.println(e.getMessage());
        } finally {
            if (opponent.getNumOfDownShips() != 5) {
                promptEnterKey();
            } else {
                System.out.println(allShipsDown);
            }
        }
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Challenging/battleship/ShipChecker.java ===
package battleship;

import java.util.Objects;
import java.lang.Math;

import static battleship.Info.*;

public class ShipChecker {

    public static final int NUMBER_DIFF_FROM_CHAR_NUMBER_TO_INT = 48;

    public static int[] getCoordinates(String coordinate) {
        if (coordinate.length() < 2 || 3 < coordinate.length()) {
            throw new WrongCoordinatesException();
        }
        if (!('A' <= coordinate.charAt(0) && coordinate.charAt(0) <= 'J') ||
                !('1' <= coordinate.charAt(1) && coordinate.charAt(1) <= '9')) {
            throw new WrongCoordinatesException();
        }
        int[] coordinates = new int[2];
        coordinates[0] = coordinate.charAt(0) - FieldBuilder.NUMBER_DIFF_FROM_ONE_TO_A;
        if (coordinate.length() == 3) {
            if (coordinate.charAt(2) != '0' || coordinate.charAt(1) != '1') {
                throw new WrongCoordinatesException();
            } else {
                coordinates[1] = 10;
            }
        } else {
            coordinates[1] = coordinate.charAt(1) - NUMBER_DIFF_FROM_CHAR_NUMBER_TO_INT;
        }
        return coordinates;
    }

    public static int[][] getCoordinatesFromLine(String line) {
        String[] stringCoordinates = line.split(" ");
        int[][] coordinates = new int[2][2];
        coordinates[0] = getCoordinates(stringCoordinates[0]);
        coordinates[1] = getCoordinates(stringCoordinates[1]);
        return coordinates;
    }

    public static void isAnythingAround(int[] coordinates, String[][] field) {
        int i = coordinates[0];
        int j = coordinates[1];
        for (int i1 = -1; i1 <= 1; i1++) {
            for (int j1 = -1; j1 <= 1; j1++) {
                if (!(i1 == 0 && j1 == 0 || i + i1 > 10 || j + j1 > 10) &&
                        Objects.equals(field[i + i1][j + j1], "O")) {
                    throw new TooCloseException();
                }
            }
        }
    }

    public static void isLengthRight(int[] firstCoordinates, int[] secondCoordinates, Ship ship) {
        if (firstCoordinates[0] == secondCoordinates[0]) {
            if (!(ship.getLength() == Math.abs(secondCoordinates[1] - firstCoordinates[1]) + 1)) {
                throw new WrongLengthException();
            }
        } else if (firstCoordinates[1] == secondCoordinates[1]) {
            if (!(ship.getLength() == Math.abs(secondCoordinates[0] - firstCoordinates[0]) + 1)) {
                throw new WrongLengthException();
            }
        } else {
            throw new WrongLocationException();
        }
    }

    public static int[][] getShipCoordinates(int[] firstCoordinate, int[] secondCoordinate, Ship ship) {
        int[][] shipCoordinates = new int[ship.getLength()][2];
        int i1 = firstCoordinate[0];
        int j1 = firstCoordinate[1];
        int i2 = secondCoordinate[0];
        int j2 = secondCoordinate[1];
        isLengthRight(firstCoordinate, secondCoordinate, ship);
        if (i1 == i2) {
            if (j1 < j2) {
                for (int i = 0, j = j1; i < ship.getLength() && j <= j2; i++, j++) {
                    shipCoordinates[i][0] = i1;
                    shipCoordinates[i][1] = j;
                }
            } else {
                for (int i = 0, j = j2; i < ship.getLength() && j <= j1; i++, j++) {
                    shipCoordinates[i][0] = i1;
                    shipCoordinates[i][1] = j;
                }
            }
        } else {
            if (i1 < i2) {
                for (int i = i1, l = 0; i <= i2 && l < ship.getLength(); i++, l++) {
                    shipCoordinates[l][0] = i;
                    shipCoordinates[l][1] = j1;
                }
            } else {
                for (int i = i2, l = 0; i <= i1 && l < ship.getLength(); i++, l++) {
                    shipCoordinates[l][0] = i;
                    shipCoordinates[l][1] = j1;
                }
            }
        }
        ship.setCoordinates(shipCoordinates);
        return shipCoordinates;
    }

    public static void checkShip(Ship ship) {
        if (ship.getNumOfHitCoordinates() == ship.getLength()) {
            ship.setShipDown();
        }
    }

    public static void placeShip(String[][] field, int[] firstCoordinates, int[] secondCoordinates, Ship ship) {
        int[][] shipCoordinates = getShipCoordinates(firstCoordinates, secondCoordinates, ship);
        for (int[] coordinate : shipCoordinates) {
            isAnythingAround(coordinate, field);
        }
        for (int[] coordinate : shipCoordinates) {
            field[coordinate[0]][coordinate[1]] = "O";
        }
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Easy/Zookeeper.java ===
import java.util.*;

public class Zookeeper {
    public static void main(String[] args) {
        String camel = """
            Switching on the camera in the camel habitat...
             ___.-''''-.
            /___  @    |
            ',,,,.     |         _.'''''''._
                 '     |        /           \\
                 |     \\    _.-'             \\
                 |      '.-'                  '-.
                 |                               ',
                 |                                '',
                  ',,-,                           ':;
                       ',,| ;,,                 ,' ;;
                          ! ; !'',,,',',,,,'!  ;   ;:
                         : ;  ! !       ! ! ;  ;   :;
                         ; ;   ! !      ! !  ; ;   ;,
                        ; ;    ! !     ! !   ; ;
                        ; ;    ! !    ! !     ; ;
                       ;,,      !,!   !,!     ;,;
                       /_I      L_I   L_I     /_I
            Look at that! Our little camel is sunbathing!""";

        String lion = """
            Switching on the camera in the lion habitat...
                                                           ,w.
                                                         ,YWMMw  ,M  ,
                                    _.---.._   __..---._.'MMMMMw,wMWmW,
                               _.-""        '''           YP"WMMMMMMMMMb,
                            .-' __.'                   .'     MMMMW^WMMMM;
                _,        .'.-'"; `,       /`     .--""      :MMM[==MWMW^;
             ,mM^"     ,-'.'   /   ;      ;      /   ,       MMMMb_wMW"  @\\
            ,MM:.    .'.-'   .'     ;     `\\    ;     `,     MMMMMMMW `"=./`-,
            WMMm__,-'.'     /      _.\\      F'''-+,,   ;_,_.dMMMMMMMM[,_ / `=_}
            "^MP__.-'    ,-' _.--""   `-,   ;       \\  ; ;MMMMMMMMMMW^``; __|
                       /   .'            ; ;         )  )`{  \\ `"^W^`,   \\  :
                      /  .'             /  (       .'  /     Ww._     `.  `"
                     /  Y,              `,  `-,=,_{   ;      MMMP`""-,  `-._.-,
                    (--, )                `,_ / `) \\/"")      ^"      `-, -;"\\:
            The lion is roaring!""";

        String deer = """
            Switching on the camera in the deer habitat...
               /|       |\\
            `__\\       //__'
               ||      ||
             \\__`\\     |'__/
               `_\\   //_'
               _.,:---;,._
               \\_:     :_/
                 |@. .@|
                 |     |
                 ,\\.-./ \\
                 ;;`-'   `---__________-----.-.
                 ;;;                         \\_\\
                 ';;;                         |
                  ;    |                      ;
                   \\   \\     \\        |      /
                    \\_, \\    /        \\     |\\
                      |';|  |,,,,,,,,/ \\    \\ \\_
                      |  |  |           \\   /   |
                      \\  \\  |           |  / \\  |
                       | || |           | |   | |
                       | || |           | |   | |
                       | || |           | |   | |
                       |_||_|           |_|   |_|
                      /_//_/           /_/   /_/
            Our 'Bambi' looks hungry. Let's go to feed it!""";

        String goose = """
            Switching on the camera in the goose habitat...
            
                                                _
                                            ,-"" "".
                                          ,'  ____  `.
                                        ,'  ,'    `.  `._
               (`.         _..--.._   ,'  ,'        \\    \\
              (`-.\\    .-""        ""'   /          (  d _b
             (`._  `-"" ,._             (            `-(   \\
             <_  `     (  <`<            \\              `-._\\
              <`-       (__< <           :
               (__        (_<_<          ;
                `------------------------------------------
            The goose is staring intently at you... Maybe it's time to change the channel?""";

        String bat = """
            Switching on the camera in the bat habitat...
            _________________               _________________
             ~-.              \\  |\\___/|  /              .-~
                 ~-.           \\ / o o \\ /           .-~
                    >           \\  W  //           <
                   /             /~---~\\             \\
                  /_            |       |            _\\
                     ~-.        |       |        .-~
                        ;        \\     /        i
                       /___      /\\   /\\      ___\\
                            ~-. /  \\_/  \\ .-~
                               V         V
            This bat looks like it's doing fine.""";

        String rabbit = """
            Switching on the camera in the rabbit habitat...
                     ,
                    /|      __
                   / |   ,-~ /
                  Y :|  //  /
                  | jj /( .^
                  >-"~"-v"
                 /       Y
                jo  o    |
               ( ~T~     j
                >._-' _./
               /   "~"  |
              Y     _,  |
             /| ;-"~ _  l
            / l/ ,-"~    \\
            \\//\\/      .- \\
             Y        /    Y
             l       I     !
             ]\\      _\\    /"\\
            (" ~----( ~   Y.  )
            It looks like we will soon have more rabbits!""";
        Scanner scanner = new Scanner(System.in);
        String[] animals = {camel, lion, deer, goose, bat, rabbit};
        String outPhrase = "See you later!";
        String numberOfHabitatOrAnExit = null;
        while (true) {
            System.out.println("Please enter the number of the habitat you would like to view:\n");
            numberOfHabitatOrAnExit = scanner.next();
            if (!numberOfHabitatOrAnExit.equals("exit")) {
                System.out.println(animals[Integer.parseInt(numberOfHabitatOrAnExit)]);   
            } else {
                System.out.println(outPhrase);
                break;
            }
        }
    }
}
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Hard/bullscows/Grader.java ===
package bullscows;

public class Grader {

    // 0123456789abcdefghijklmnopqrstuvwxyz
    public static int[] digitsAndCharsInCode(String code) {
        int[] digitsAndChars = new int[36];
        for (int i = 0; i < code.length(); i++) {
            if ('0' <= code.charAt(i) && code.charAt(i) <= '9') {
                digitsAndChars[code.charAt(i) - '0']++;
            }
            if ('a' <= code.charAt(i) && code.charAt(i) <= 'z') {
                digitsAndChars[code.charAt(i) - 'a' + 10]++;
            }
        }
        return digitsAndChars;
    }

    public static int[] getBullsAndCows(String first, String second) {
        int cows = 0;
        int bulls = 0;
        int[] digitsAndCharsInCodeInFirst = digitsAndCharsInCode(first);
        int[] digitsAndCharsInCodeInSecond = digitsAndCharsInCode(second);
        for (int i = 0; i < first.length(); i++) {
            if (first.charAt(i) == second.charAt(i)) {
                bulls++;
            }
        }
        for (int i = 0; i < 36; i++) {
            if (digitsAndCharsInCodeInFirst[i] > 0 && digitsAndCharsInCodeInSecond[i] > 0) {
                cows += digitsAndCharsInCodeInSecond[i];
            }
        }
        cows -= bulls;
        return new int[]{bulls, cows};
    }

    public static void showGrade(int[] bullsAndCows) {
        StringBuilder[] stringBullsAndCows = new StringBuilder[]{new StringBuilder("bull"), new StringBuilder("cow")};
        for (int i = 0; i < 2; i++) {
            if (bullsAndCows[i] > 1) {
                stringBullsAndCows[i].append('s');
            }
        }
        if (bullsAndCows[0] == 0 && bullsAndCows[1] == 0) {
            System.out.println("Grade: None\n");
        } else if (bullsAndCows[0] == 0) {
            System.out.printf("Grade: %d %s\n", bullsAndCows[1], stringBullsAndCows[1]);
        } else if (bullsAndCows[1] == 0) {
            System.out.printf("Grade: %d %s\n", bullsAndCows[0], stringBullsAndCows[0]);
        } else {
            System.out.printf("Grade: %d %s and %d %s\n",
                    bullsAndCows[0], stringBullsAndCows[0], bullsAndCows[1], stringBullsAndCows[1]);
        }
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Hard/bullscows/InputAndExceptions.java ===
package bullscows;

import java.util.Scanner;

public class InputAndExceptions {

    public static int inputNumber(Scanner scanner, String message) {
        System.out.println(message);
        String number = scanner.nextLine();
        int integerNumber;
        try {
            integerNumber = Integer.parseInt(number);
            if (integerNumber < 1) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            throw new NotValidNumberException(number);
        }
        return integerNumber;
    }

    public static int[] inputCodeData(Scanner scanner) {
        int integerLength = inputNumber(scanner, "Input the length of the secret code:");
        int integerSymbols = inputNumber(scanner, "Input the number of possible symbols in the code:");
        if (integerSymbols < integerLength) {
            throw new SymbolsLessThanLengthException(integerLength, integerSymbols);
        }
        if (integerSymbols > 36) {
            throw new OutOfMaxNumberException();
        }
        return new int[]{integerLength, integerSymbols};
    }

    public static class SymbolsLessThanLengthException extends RuntimeException {
        SymbolsLessThanLengthException(int length, int symbols) {
            super(String.format("Error: it's not possible to generate a code " +
                    "with a length of %d with %d unique symbols.", length, symbols));
        }
    }

    public static class NotValidNumberException extends RuntimeException {
        NotValidNumberException(String number) {
            super(String.format("Error: \"%s\" isn't a valid number.", number));
        }
    }

    public static class OutOfMaxNumberException extends RuntimeException {
        OutOfMaxNumberException() {
            super("Error: maximum number of possible symbols in the code is 36 (0-9, a-z).");
        }
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Hard/bullscows/Main.java ===
package bullscows;

import java.util.Scanner;

import static bullscows.SecretCode.*;
import static bullscows.Grader.*;
import static bullscows.InputAndExceptions.*;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int turn = 0;
        boolean isCodeGuessed = false;
        try {
            int[] temp = inputCodeData(scanner);
            int length = temp[0];
            int symbols = temp[1];
            String secretCode = generateSecretCode(length, symbols);

            if (symbols > 10) {
                System.out.printf("The secret is prepared: %s (0-9, a-%c).\n", "*".repeat(length),
                        (char) (symbols - 11 + 'a'));
            } else {
                System.out.printf("The secret is prepared: %s (0-%d).\n", "*".repeat(length), symbols - 1);
            }

            System.out.println("Okay, let's start a game!");
            while (!isCodeGuessed) {
                turn++;
                System.out.printf("Turn %d:\n", turn);
                int[] bullsAndCows = getBullsAndCows(secretCode, scanner.next());
                if (bullsAndCows[0] == length) {
                    isCodeGuessed = true;
                }
                showGrade(bullsAndCows);
            }
            System.out.println("Congratulations! You guessed the secret code.");
        } catch (RuntimeException e) {
            System.out.println(e.getMessage());
        }
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Hard/bullscows/SecretCode.java ===
package bullscows;

import java.util.Random;

public class SecretCode {
    public static int rnd(int min, int max) {
        max -= min + 1;
        return (new Random().nextInt(max) + min);
    }

    public static void putRandomDigitOrChar(StringBuilder digitsAndChars, StringBuilder secretCode) {
        int index = rnd(0, digitsAndChars.length());
        secretCode.append(digitsAndChars.charAt(index));
        digitsAndChars.deleteCharAt(index);
    }

    public static String generateSecretCode(int lengthOfCode, int numberOfSymbols) {
        StringBuilder digitsAndChars = new StringBuilder("0123456789abcdefghijklmnopqrstuvwxyz");
        digitsAndChars = new StringBuilder(digitsAndChars.substring(0, numberOfSymbols));
        StringBuilder secretCode = new StringBuilder();
        while (secretCode.length() != lengthOfCode) {
            putRandomDigitOrChar(digitsAndChars, secretCode);
        }
        return new String(secretCode);
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Hard/machine/.idea/.gitignore ===
# Default ignored files
/shelf/
/workspace.xml

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Hard/machine/.idea/misc.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectRootManager" version="2" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Hard/machine/.idea/modules.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/machine.iml" filepath="$PROJECT_DIR$/machine.iml" />
    </modules>
  </component>
</project>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Hard/machine/.idea/vcs.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$/../../.." vcs="Git" />
  </component>
</project>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Hard/machine/Actions.java ===
package machine;

import java.util.Scanner;

import static machine.CoffeeMachine.*;

public class Actions {
    public static void startMenu(Scanner scanner) {
        System.out.println("Write action (buy, fill, take, remaining, exit): ");
        String action = scanner.next();
        System.out.println();
        switch (action) {
            case "buy" -> buy(scanner);
            case "fill" -> fill(scanner);
            case "take" -> take();
            case "remaining" -> showResources();
            case "exit" -> MenuWorking = false;
            default -> System.out.println("Wrong input");
        }
    }

    public static void buy(Scanner scanner) {
        System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: ");
        String option = scanner.next();
        switch (option) {
            case "1" -> makeCoffee(espresso);
            case "2" -> makeCoffee(latte);
            case "3" -> makeCoffee(cappuccino);
            case "back" -> {
            }
            default -> System.out.println("Wrong input");
        }
    }

    public static void fill(Scanner scanner) {
        System.out.println("Write how many ml of water you want to add: ");
        currentWater += scanner.nextInt();
        System.out.println("Write how many ml of milk you want to add: ");
        currentMilk += scanner.nextInt();
        System.out.println("Write how many grams of coffee beans you want to add: ");
        currentBeans += scanner.nextInt();
        System.out.println("Write how many disposable cups you want to add: ");
        currentCups += scanner.nextInt();
    }

    public static void take() {
        System.out.printf("I gave you $%d\n", currentMoney);
        currentMoney = 0;
    }

    public static void makeCoffee(Coffee coffee) {
        if (checkResources(coffee)) {
            currentWater -= coffee.requiredVolumeOfWater;
            currentMilk -= coffee.requiredVolumeOfMilk;
            currentBeans -= coffee.requiredWeightOfBeans;
            currentCups--;
            currentMoney += coffee.cost;
        }
    }

    public static boolean checkResources(Coffee coffee) {
        if (currentWater - coffee.requiredVolumeOfWater < 0) {
            System.out.println("Sorry, not enough water!\n");
            return false;
        } else if (currentMilk - coffee.requiredVolumeOfMilk < 0) {
            System.out.println("Sorry, not enough milk!\n");
            return false;
        } else if (currentBeans - coffee.requiredWeightOfBeans < 0) {
            System.out.println("Sorry, not enough coffee beans!\n");
            return false;
        } else if (currentCups == 0) {
            System.out.println("Sorry, not enough disposable cups!\n");
            return false;
        } else {
            System.out.println("I have enough resources, making you a coffee!\n");
            return true;
        }
    }

    public static void showResources() {
        System.out.println("The coffee machine has: ");
        System.out.printf("%d ml of water\n", currentWater);
        System.out.printf("%d ml of milk\n", currentMilk);
        System.out.printf("%d g of coffee beans\n", currentBeans);
        System.out.printf("%d disposable cups\n", currentCups);
        System.out.printf("$%d of money\n", currentMoney);
        System.out.println();
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Hard/machine/Coffee.java ===
package machine;

public class Coffee {
    Coffee(int requiredVolumeOfWater, int requiredVolumeOfMilk, int requiredWeightOfBeans, int cost) {
        this.requiredVolumeOfWater = requiredVolumeOfWater;
        this.requiredVolumeOfMilk = requiredVolumeOfMilk;
        this.requiredWeightOfBeans = requiredWeightOfBeans;
        this.cost = cost;
    }

    int requiredVolumeOfWater; // ml
    int requiredVolumeOfMilk; // ml
    int requiredWeightOfBeans; // g
    int cost; // $

}
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Hard/machine/CoffeeMachine.java ===
package machine;

import java.util.Scanner;

public class CoffeeMachine {
    // Current resources
    public static int currentWater = 400; // ml
    public static int currentMilk = 540; // ml
    public static int currentBeans = 120; // g
    public static int currentCups = 9; // amount
    public static int currentMoney = 550; // $
    static Coffee espresso = new Coffee(250, 0, 16, 4);
    static Coffee latte = new Coffee(350, 75, 20, 7);
    static Coffee cappuccino = new Coffee(200, 100, 12, 6);
    public static boolean MenuWorking = true;

    public static void main(String[] args) {
        var scanner = new Scanner(System.in);
        while (MenuWorking) {
            Actions.startMenu(scanner);
        }
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Medium/.idea/.gitignore ===
# Default ignored files
/shelf/
/workspace.xml
# Editor-based HTTP Client requests
/httpRequests/
# Datasource local storage ignored files
/dataSources/
/dataSources.local.xml

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Medium/.idea/Medium.iml ===
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$" />
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Medium/.idea/misc.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectRootManager" version="2" project-jdk-name="20" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Medium/.idea/modules.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/Medium.iml" filepath="$PROJECT_DIR$/.idea/Medium.iml" />
    </modules>
  </component>
</project>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Medium/.idea/vcs.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
  </component>
</project>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Java/Medium/Cinema.java ===
import java.util.Scanner;

public class Cinema {
    public static final int INT_CHAR_DIFFERENCE = 48;
    public static final int LIMINAL_NUMBER = 60;
    public static int rows = 0;
    public static int seats = 0;
    public static int totalSeats = 0;
    public static int purchasedTickets = 0;
    public static int currentIncome = 0;

    public static char[][] startStandardSpace(Scanner scanner) {
        System.out.println("Enter the number of rows:\n");
        rows = scanner.nextInt();
        System.out.println("Enter the number of seats in each row:\n");
        seats = scanner.nextInt();
        totalSeats = rows * seats;
        char[][] cinema = new char[rows + 1][seats + 1];
        for (int i = 0; i < cinema.length; i++) {
            for (int j = 0; j < cinema[i].length; j++) {
                if (i == 0 && j == 0) {
                    cinema[i][j] = ' ';
                } else if (i == 0) {
                    cinema[i][j] = (char) (j + INT_CHAR_DIFFERENCE);
                } else if (j == 0) {
                    cinema[i][j] = (char) (i + INT_CHAR_DIFFERENCE);
                } else {
                    cinema[i][j] = 'S';
                }
            }
        }
        return cinema;
    }

    public static void showCinema(char[][] cinema) {
        System.out.println("Cinema: ");
        for (char[] chars : cinema) {
            for (char element : chars) {
                System.out.print(element + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public static void buyTicket(char[][] cinema, Scanner scanner) {
        boolean availableSeatSelected = false;
        while (!availableSeatSelected) {
            System.out.println("Enter a row number:\n");
            int row = scanner.nextInt();
            System.out.println("Enter a seat number in that row:\n");
            int seat = scanner.nextInt();
            if (!(0 < row && row <= rows) || !(0 < seat && seat <= seats)) {
                System.out.println("Wrong input!");
                continue;
            }
            if (cinema[row][seat] == 'B') {
                System.out.println("That ticket has already been purchased!");
                continue;
            }
            int price = totalSeats <= LIMINAL_NUMBER || row <= rows / 2 ? 10 : 8;
            System.out.printf("Ticket price: $%d\n", price);
            cinema[row][seat] = 'B';
            availableSeatSelected = true;
            purchasedTickets++;
            currentIncome += price;
        }
    }

    public static void showCinemaMenu(char[][] cinema, Scanner scanner) {
        String menu = """
                1. Show the seats
                2. Buy a ticket
                3. Statistics
                0. Exit
                """;
        menuLoop:
        while (true) {
            System.out.println(menu);
            int item = scanner.nextInt();
            switch (item) {
                case 1 -> showCinema(cinema);
                case 2 -> buyTicket(cinema, scanner);
                case 3 -> {
                    System.out.printf("Number of purchased tickets: %d\n", purchasedTickets);
                    System.out.printf("Percentage: %.2f%%\n", purchasedTickets * 100 / (float) totalSeats);
                    System.out.printf("Current income: $%d\n", currentIncome);
                    System.out.printf("Total income: $%d\n", rows / 2 * seats * 10 +
                            (rows / 2 + rows % 2) * seats * 8);
                }
                case 0 -> {
                    break menuLoop;
                }
                default -> System.out.println("Error when selecting an item." +
                        " Please enter an integer from 0 to 2 inclusive");
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        char[][] cinema = startStandardSpace(scanner);
        showCinemaMenu(cinema, scanner);
    }
}
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Kotlin/Challenging/Minesweeper (Kotlin)/Main.kt ===
package minesweeper

fun main() {
    println("How many mines do you want on the field?")
    val minesCount = readlnOrNull()?.toIntOrNull() ?: 0
    val rows = 9
    val cols = 9

    var minesGenerated = false
    var finalField = Array(rows) { CharArray(cols) { '.' } }
    val displayedField = Array(rows) { CharArray(cols) { '.' } }

    fun countMinesAround(r: Int, c: Int): Int {
        var count = 0
        for (dr in -1..1) {
            for (dc in -1..1) {
                if (dr == 0 && dc == 0) continue
                val nr = r + dr
                val nc = c + dc
                if (nr in 0 until rows && nc in 0 until cols && finalField[nr][nc] == 'X') {
                    count++
                }
            }
        }
        return count
    }

    fun generateMines(firstRow: Int, firstCol: Int) {
        finalField = Array(rows) { CharArray(cols) { '.' } }
        val availableCells = mutableListOf<Pair<Int, Int>>()
        for (r in 0 until rows) {
            for (c in 0 until cols) {
                if (r != firstRow || c != firstCol) availableCells.add(Pair(r, c))
            }
        }
        val shuffled = availableCells.shuffled().take(minesCount)
        shuffled.forEach { (r, c) -> finalField[r][c] = 'X' }
        for (r in 0 until rows) {
            for (c in 0 until cols) {
                if (finalField[r][c] != 'X') {
                    val cnt = countMinesAround(r, c)
                    finalField[r][c] = if (cnt > 0) cnt.digitToChar() else '.'
                }
            }
        }
    }

    fun exploreCell(r: Int, c: Int) {
        if (r !in 0 until rows || c !in 0 until cols) return
        if (displayedField[r][c] == '/' || displayedField[r][c].isDigit()) return

        if (displayedField[r][c] == '*') displayedField[r][c] = '.'

        when (finalField[r][c]) {
            'X' -> return
            '.' -> {
                displayedField[r][c] = '/'
                for (dr in -1..1) {
                    for (dc in -1..1) {
                        exploreCell(r + dr, c + dc)
                    }
                }
            }
            else -> displayedField[r][c] = finalField[r][c]
        }
    }

    fun checkWin(): Boolean {
        var allMinesMarked = true
        var noWrongMarks = true
        for (r in 0 until rows) {
            for (c in 0 until cols) {
                if (finalField[r][c] == 'X' && displayedField[r][c] != '*') allMinesMarked = false
                if (finalField[r][c] != 'X' && displayedField[r][c] == '*') noWrongMarks = false
            }
        }
        if (allMinesMarked && noWrongMarks) return true

        for (r in 0 until rows) {
            for (c in 0 until cols) {
                if (finalField[r][c] != 'X' && (displayedField[r][c] == '.' || displayedField[r][c] == '*')) return false
            }
        }
        return true
    }

    fun printField() {
        println(" │123456789│")
        println("—│—————————│")
        for (r in 0 until rows) {
            print("${r + 1}│")
            print(displayedField[r].joinToString(""))
            println("│")
        }
        println("—│—————————│")
    }

    printField()

    while (true) {
        println("Set/unset mine marks or claim a cell as free:")
        val input = readlnOrNull()?.split(" ") ?: continue
        if (input.size != 3) continue

        val x = input[0].toIntOrNull() ?: continue
        val y = input[1].toIntOrNull() ?: continue
        val cmd = input[2]

        if (x !in 1..cols || y !in 1..rows || cmd !in listOf("mine", "free")) continue

        val c = x - 1
        val r = y - 1

        when (cmd) {
            "mine" -> {
                if (displayedField[r][c] == '.') {
                    displayedField[r][c] = '*'
                } else if (displayedField[r][c] == '*') {
                    displayedField[r][c] = '.'
                }
            }
            "free" -> {
                if (!minesGenerated) {
                    generateMines(r, c)
                    minesGenerated = true
                }
                if (finalField[r][c] == 'X') {
                    for (i in 0 until rows) {
                        for (j in 0 until cols) {
                            if (finalField[i][j] == 'X') displayedField[i][j] = 'X'
                        }
                    }
                    printField()
                    println("You stepped on a mine and failed!")
                    return
                }
                exploreCell(r, c)
            }
        }

        printField()

        if (checkWin()) {
            println("Congratulations! You found all the mines!")
            return
        }
    }
}
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/.gitignore ===
# Java
*.class
*.jar
*.war
*.ear

# Gradle
.gradle/
build/
out/

# IntelliJ IDEA
.idea/
*.iml
*.ipr
*.iws

# Logs
*.log
logs/

# OS-specific
.DS_Store
Thumbs.db

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/A change of plans/task-info.yaml ===
type: edu
files:
  - name: src/cinema/Main.java
    visible: true
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    learner_created: false
  - name: build.gradle
    visible: true
    learner_created: false
  - name: test/CinemaTests.java
    visible: false
    learner_created: false
  - name: src/cinema/SeatsController.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/947/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 21 Apr 2025 17:08:25 UTC"
record: 3

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/A change of plans/task-remote-info.yaml ===
id: 13377
update_date: "Wed, 22 Nov 2023 00:20:13 UTC"

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/A change of plans/task.html ===
<div class="step-text">
<h5 id="description">Description</h5>
<p>We live in a fast world, and our plans may change very quickly. Let's add the ability to refund a ticket if a customer can't come and watch a movie. We will use tokens to secure the ticket refund process.</p>
<h5 id="objectives">Objectives</h5>
<p>Change the JSON response when a customer purchases a ticket by making a <code class="java">POST</code> request to the <code class="java">/purchase</code> endpoint. Turn it into the following format:</p>
<pre><code class="java">{
    "token": "00ae15f2-1ab6-4a02-a01f-07810b42c0ee",
    "ticket": {
        "row": 1,
        "column": 1,
        "price": 10
    }
}</code></pre>
<p>We recommend using the <code class="java">randomUUID()</code> method of the <code class="java">UUID</code> class to generate tokens. Take a look at this <a href="https://www.baeldung.com/java-uuid" rel="noopener noreferrer nofollow" target="_blank">UUID Guide</a> by Baeldung if you're interested in more detail.</p>
<p>Implement the <code class="java">/return</code> endpoint, which will handle <code class="java">POST</code> requests and allow customers to refund their tickets.</p>
<p>The request should have the <code class="java">token</code> feature that identifies the ticket in the request body. Once you have the token, you need to identify the ticket it relates to and mark it as available. The response body should be as follows:</p>
<pre><code class="java">{
    "ticket": {
        "row": 1,
        "column": 1,
        "price": 10
    }
}</code></pre>
<p> The <code class="java">ticket</code> should contain the information about the returned ticket.</p>
<p>If you cannot identify the ticket by the token, make your program respond with a <code class="java">400</code> status code and the following response body:</p>
<pre><code class="java">{
    "error": "Wrong token!"
}</code></pre>
<h5 id="examples">Examples</h5>
<p><strong>Example 1</strong>: <em>a correct</em> <code class="java">POST /purchase</code><em> request</em></p>
<p><em>Request body:</em></p>
<pre><code class="java">{
    "row": 3,
    "column": 4
}</code></pre>
<p><em>Response body:</em></p>
<pre><code class="java">{
    "token": "e739267a-7031-4eed-a49c-65d8ac11f556",
    "ticket": {
        "row": 3,
        "column": 4,
        "price": 10
    }
}</code></pre>
<p><strong>Example 2</strong>: <code class="java">POST /return</code> <em>with the correct token</em></p>
<p><em>Request body:</em></p>
<pre><code class="java">{
    "token": "e739267a-7031-4eed-a49c-65d8ac11f556"
}</code></pre>
<p><em>Response body:</em></p>
<pre><code class="java">{
    "ticket": {
        "row": 1,
        "column": 2,
        "price": 10
    }
}</code></pre>
<p><strong>Example 3</strong>: <code class="java">POST /return</code> <em>with an expired token</em></p>
<p><em>Request body:</em></p>
<pre><code class="java">{
    "token": "e739267a-7031-4eed-a49c-65d8ac11f556"
}</code></pre>
<p><em>Response body:</em></p>
<pre><code class="java">{
    "error": "Wrong token!"
}</code></pre>

</div>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/Take your seat/task-info.yaml ===
type: edu
files:
  - name: src/cinema/Main.java
    visible: true
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    learner_created: false
  - name: build.gradle
    visible: true
    learner_created: false
  - name: test/CinemaTests.java
    visible: false
    learner_created: false
  - name: src/cinema/SeatsController.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/946/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 21 Apr 2025 17:07:37 UTC"
record: 2

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/Take your seat/task-remote-info.yaml ===
id: 13376
update_date: "Tue, 02 Jul 2024 01:55:07 UTC"

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/Take your seat/task.html ===
<div class="step-text">
<p></p><h5 id="description">Description</h5><p>Movie-goers should be able to check the availability of seats before purchasing a ticket. In this stage, you need to add an endpoint to check and purchase an available ticket. If the ticket has been purchased or the request contains wrong information about the ticket, return an error message.</p><h5 id="objectives">Objectives</h5><p>Implement the <code class="language-json">/purchase</code> endpoint that handles <code class="language-json">POST</code> requests and marks a booked ticket as purchased.</p><p>A request should contain the following data:</p><ul><li><p><code class="language-json">row</code> — the row number;</p></li><li><p><code class="language-json">column</code> — the column number.</p></li></ul><p>Take these variables and check if the specified ticket is available. If the ticket is booked, mark the seat as purchased and don't show it in the list.</p><p>If the purchase is successful, the response body should be as follows:</p><pre><code class="language-json">{
    "row": 5,
    "column": 7,
    "price": 8
}</code></pre><p>To learn more about how you can create responses, you can take a look at the following topic: <a href="https://hyperskill.org/learn/step/36523" rel="noopener noreferrer nofollow" target="_blank">Response bodies</a></p><p>The ticket price is determined by a row number. If the row number is less or equal to 4, set the price at <strong>10</strong>. All other rows cost <strong>8</strong> per seat.</p><p>If the seat is taken, respond with a <code class="language-json">400 (Bad Request)</code> status code.<strong> </strong>The response body should contain the following:</p><pre><code class="language-json">{
    "error": "The ticket has been already purchased!"
}</code></pre><p>If users pass a wrong row/column number, respond with a <code class="language-json">400</code> status code and the following line:</p><pre><code class="language-json">{
    "error": "The number of a row or a column is out of bounds!"
}</code></pre><p>Show the ticket price when the <code class="language-json">/seats</code> endpoint is accessed. See the first example for more details.</p><h5 id="examples">Examples</h5><p><strong>Example 1</strong>: <em>a</em> <code class="language-json">GET /seats</code> <em>request</em></p><p><em>Response body:</em></p><pre><code class="language-json">{
   "rows": 9,
   "columns": 9,
   "seats": [
      {
         "row": 1,
         "column": 1,
         "price": 10
      },
      {
         "row": 1,
         "column": 2,
         "price": 10
      },
      {
         "row": 1,
         "column": 3,
         "price": 10
      },

      ........

      {
         "row": 9,
         "column": 8,
         "price": 8
      },
      {
         "row": 9,
         "column": 9,
         "price": 8
      }
   ]
}</code></pre><p><strong>Example 2</strong>: <em>a</em> <code class="language-json">POST /purchase</code> <em>correct request</em></p><p><em>Request body:</em></p><pre><code class="language-json">{
    "row": 3,
    "column": 4
}</code></pre><p><em>Response body:</em></p><pre><code class="language-json">{
    "row": 3,
    "column": 4,
    "price": 10
}</code></pre><p><strong>Example 3</strong>: <em>a</em> <code class="language-json">POST /purchase</code> <em>request, the ticket is already booked</em></p><p><em>Request body:</em></p><pre><code class="language-json">{
    "row": 3,
    "column": 4
}</code></pre><p><em>Response body:</em></p><pre><code class="language-json">{
    "error": "The ticket has been already purchased!"
}</code></pre><p><strong>Example 4</strong>: <em>a</em> <code class="language-json">POST /purchase</code> <em>request, a wrong row number</em></p><p><em>Request body:</em></p><pre><code class="language-json">{
    "row": 15,
    "column": 4
}</code></pre><p><em>Response body:</em></p><pre><code class="language-json">{
    "error": "The number of a row or a column is out of bounds!"
}</code></pre>
</div>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/The show begins/task-info.yaml ===
type: edu
files:
  - name: src/cinema/Main.java
    visible: true
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    learner_created: false
  - name: test/CinemaTests.java
    visible: false
    learner_created: false
  - name: build.gradle
    visible: true
    learner_created: false
  - name: src/cinema/SeatsController.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/945/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 21 Apr 2025 17:06:44 UTC"
record: 1

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/The show begins/task-remote-info.yaml ===
id: 13375
update_date: "Tue, 14 Jan 2025 20:50:23 UTC"

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/The show begins/task.html ===
<div class="step-text">
<h5 id="description">Description</h5>
<p>There are many fun activities on the planet Earth, and one of them is going to the movies. It is arguably the most accessible, inclusive, and fulfilling entertainment. Bring your friends or loved ones — each movie is a whole new adventure waiting to be experienced.</p>
<p>Let's make our virtual movie theater with the help of a REST service. Our movie theater has 9 rows with 9 seats each. In this stage, you need to create a simple endpoint that will return the information about the cinema in JSON format.</p>
<h5 id="objectives">Objectives</h5>
<p>Implement the <code class="language-json">/seats</code> endpoint that handles <code class="language-json">GET</code> requests and returns the information about the movie theatre.</p>
<p>The response should contain information about the rows, columns, and available seats. The response is a JSON object and has the following format:</p>
<pre><code class="language-json">{
   "rows": 5,
   "columns": 6,
   "seats": [
      {
         "row": 1,
         "column": 1
      },

      ........

      {
         "row": 5,
         "column": 5
      },
      {
         "row": 5,
         "column": 6
      }
   ]
}</code></pre>
<p>Our cinema room has 9 rows with 9 seats each, so the total number of respective rows and columns also amounts to 9 each.</p>
<p>Note that the <code class="language-json">seats</code> array contains 81 elements, as there are 81 seats in the room.</p>
<h5 id="example">Example</h5>
<p><strong>Example 1:</strong><em> a </em><code class="language-json">GET /seats</code> <em>request</em><br/>
<em>Response body:</em></p>
<pre><code class="language-json">{
   "rows": 9,
   "columns": 9,
   "seats": [
      {
         "row": 1,
         "column": 1
      },
      {
         "row":1,
         "column":2
      },
      {
         "row": 1,
         "column": 3
      },

      ........

      {
         "row": 9,
         "column": 8
      },
      {
         "row": 9,
         "column": 9
      }
   ]
}</code></pre>

</div>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/The statistics/task-info.yaml ===
type: edu
files:
  - name: src/cinema/Main.java
    visible: true
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    learner_created: false
  - name: build.gradle
    visible: true
    learner_created: false
  - name: test/CinemaTests.java
    visible: false
    learner_created: false
  - name: src/cinema/SeatsController.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 21 Apr 2025 17:10:01 UTC"
record: -1

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/The statistics/task-remote-info.yaml ===
id: 13378
update_date: "Wed, 22 Nov 2023 00:20:15 UTC"

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/The statistics/task.html ===
<div class="step-text">
<h5 id="description">Description</h5>
<p>Your REST service knows how to show available tickets, sell them, and make a refund. Let's add statistics available only to the theatre managers.</p>
<h5 id="objectives">Objectives</h5>
<p>Implement the <code class="java">/stats</code> endpoint that will handle <code class="java">GET</code> requests with URL parameters. If the URL parameters contain a <code class="java">password</code> key with a <code class="java">super_secret</code> value, return the movie theatre statistics in the following format:</p>
<pre><code class="java">{
    "income": 0,
    "available": 81,
    "purchased": 0
}</code></pre>
<p>Take a look at the description of keys:</p>
<ul>
<li><code class="java">income</code> — shows the total income of sold tickets.</li>
<li><code class="java">available</code> — shows how many seats are available.</li>
<li><code class="java">purchased</code> — shows how many tickets were purchased.</li>
</ul>
<p>If the parameters don't contain a password key or a wrong value has been passed, respond with a <code class="java">401</code> status code. The response body should contain the following:</p>
<pre><code class="java">{
    "error": "The password is wrong!"
}</code></pre>
<h5 id="examples">Examples</h5>
<p><strong> Example 1: </strong><em>a</em><strong> </strong><code class="java">GET /stats</code><em> request with no parameters</em></p>
<p><em>Response body:</em></p>
<pre><code class="java">{
    "error": "The password is wrong!"
}</code></pre>
<p><strong>Example 2: </strong><em>a</em><strong> </strong><code class="java">GET /stats</code><em> request with the correct password</em></p>
<p><em>Response body:</em></p>
<pre><code class="java">{
    "income": 30,
    "available": 78,
    "purchased": 3
}</code></pre>

</div>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/lesson-info.yaml ===
type: framework
content:
  - The show begins
  - Take your seat
  - A change of plans
  - The statistics
current_task: 3

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/task/build.gradle ===
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
}

sourceSets.main.resources.srcDirs = ["src/resources"]

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
}

test {
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/task/src/cinema/Main.java ===
package cinema;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Main {
    public static void main(String[] args) {
        SpringApplication.run(Main.class, args);
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/task/src/cinema/SeatsController.java ===
package cinema;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
public class SeatsController {

    private final int rows = 9;
    private final int columns = 9;
    private final Set<String> bookedSeats = new HashSet<>();
    private final Map<String, Map<String, Object>> purchasedTickets = new HashMap<>();
    private int totalIncome = 0;

    @GetMapping("/seats")
    public Map<String, Object> getSeats() {
        List<Map<String, Object>> seats = new ArrayList<>();
        for (int row = 1; row <= rows; row++) {
            for (int column = 1; column <= columns; column++) {
                if (!isSeatBooked(row, column)) {
                    Map<String, Object> seat = new HashMap<>();
                    seat.put("row", row);
                    seat.put("column", column);
                    seat.put("price", row <= 4 ? 10 : 8);
                    seats.add(seat);
                }
            }
        }

        Map<String, Object> response = new HashMap<>();
        response.put("rows", rows);
        response.put("columns", columns);
        response.put("seats", seats);

        return response;
    }

    @PostMapping("/purchase")
    public ResponseEntity<Object> purchaseTicket(@RequestBody Map<String, Integer> request) {
        int row = request.getOrDefault("row", -1);
        int column = request.getOrDefault("column", -1);

        if (row < 1 || row > rows || column < 1 || column > columns) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("error", "The number of a row or a column is out of bounds!"));
        }

        String seatKey = row + "-" + column;
        if (bookedSeats.contains(seatKey)) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("error", "The ticket has been already purchased!"));
        }

        bookedSeats.add(seatKey);
        int price = row <= 4 ? 10 : 8;

        String token = UUID.randomUUID().toString();
        Map<String, Object> ticketDetails = Map.of(
                "row", row,
                "column", column,
                "price", price
        );
        purchasedTickets.put(token, ticketDetails);

        totalIncome += price;

        return ResponseEntity.ok(Map.of(
                "token", token,
                "ticket", ticketDetails
        ));
    }

    @PostMapping("/return")
    public ResponseEntity<Object> returnTicket(@RequestBody Map<String, String> request) {
        String token = request.get("token");

        if (!purchasedTickets.containsKey(token)) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("error", "Wrong token!"));
        }

        Map<String, Object> ticketDetails = purchasedTickets.remove(token);
        int row = (int) ticketDetails.get("row");
        int column = (int) ticketDetails.get("column");
        int price = (int) ticketDetails.get("price");
        bookedSeats.remove(row + "-" + column);

        totalIncome -= price;

        return ResponseEntity.ok(Map.of("ticket", ticketDetails));
    }

    @GetMapping("/stats")
    public ResponseEntity<Object> getStats(@RequestParam(required = false) String password) {
        if (!"super_secret".equals(password)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Map.of("error", "The password is wrong!"));
        }

        int availableSeats = rows * columns - bookedSeats.size();
        int purchasedTicketsCount = purchasedTickets.size();

        Map<String, Object> stats = Map.of(
                "income", totalIncome,
                "available", availableSeats,
                "purchased", purchasedTicketsCount
        );

        return ResponseEntity.ok(stats);
    }

    private boolean isSeatBooked(int row, int column) {
        return bookedSeats.contains(row + "-" + column);
    }
}
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/task/src/resources/application.properties ===
server.port=28852
management.endpoints.web.exposure.include=*
management.endpoint.shutdown.enabled=true
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/Cinema Room REST Service with Java/task/test/CinemaTests.java ===
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import org.hyperskill.hstest.dynamic.DynamicTest;
import org.hyperskill.hstest.dynamic.input.DynamicTesting;
import org.hyperskill.hstest.exception.outcomes.PresentationError;
import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
import org.hyperskill.hstest.mocks.web.response.HttpResponse;
import org.hyperskill.hstest.stage.SpringTest;
import org.hyperskill.hstest.testcase.CheckResult;
import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
import org.hyperskill.hstest.testing.expect.json.builder.JsonObjectBuilder;

import java.util.Map;
import java.util.UUID;

import static org.hyperskill.hstest.testing.expect.Expectation.expect;
import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

public class CinemaTests extends SpringTest {

    private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
    private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
    private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
    private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

    private static final int totalRows = 9;
    private static final int totalCols = 9;
    private static final Gson gson = new Gson();

    private static String token = "";

    private static void checkStatusCode(HttpResponse resp, int status) {
        if (resp.getStatusCode() != status) {
            throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                            resp.getRequest().getLocalUri() +
                            " should respond with status code " + status + ", " +
                            "responded: " + resp.getStatusCode() + "\n\n" +
                            "Response body:\n\n" + resp.getContent()
            );
        }
    }

    CheckResult testEndpoint() {
        HttpResponse response = get("/seats").send();
        checkStatusCode(response, 200);
        return CheckResult.correct();
    }

    CheckResult testEndpointAvailableSeats() {
        HttpResponse response = get("/seats").send();

        JsonArrayBuilder arrayBuilder = isArray(totalRows * totalCols);
        for (int i = 1; i <= totalRows; i++) {
            for (int j = 1; j <= totalCols; j++) {
                int price = i < 5 ? 10 : 8;
                JsonObjectBuilder objectBuilder = isObject()
                        .value("row", i)
                        .value("column", j)
                        .value("price", price);
                arrayBuilder = arrayBuilder.item(objectBuilder);
            }
        }
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("seats", arrayBuilder)
                        .value("columns", 9)
                        .value("rows", 9)
        );

        return CheckResult.correct();
    }

    CheckResult testPurchaseTicket() {
        HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                        "row", "1",
                        "column", "1"
                ))
        ).send();

        checkStatusCode(response, 200);

        expect(response.getContent()).asJson()
                .check(
                        isObject()
                                .value("token", isString())
                                .value("ticket",
                                        isObject()
                                                .value("row", 1)
                                                .value("column", 1)
                                                .value("price", 10)
                                )
                );

        JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
        token = object.get("token").getAsString();

        return CheckResult.correct();
    }

    CheckResult testErrorMessageThatTicketHasBeenPurchased() {
        HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                        "row", "1",
                        "column", "1"
                ))
        ).send();

        checkStatusCode(response, 400);

        expect(response.getContent()).asJson()
                .check(
                        isObject()
                                .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                                .anyOtherValues()
                );
        return CheckResult.correct();
    }

    CheckResult testErrorMessageThatNumbersOutOfBounds() {
        HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                        "row", "10",
                        "column", "1"
                ))
        ).send();

        checkStatusCode(response, 400);

        expect(response.getContent()).asJson()
                .check(
                        isObject()
                                .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                .anyOtherValues()
                );

        response = post(
                "/purchase",
                gson.toJson(Map.of(
                        "row", "1",
                        "column", "10"
                ))
        ).send();

        checkStatusCode(response, 400);

        expect(response.getContent()).asJson()
                .check(
                        isObject()
                                .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                .anyOtherValues()
                );

        response = post(
                "/purchase",
                gson.toJson(Map.of(
                        "row", "-1",
                        "column", "-1"
                ))
        ).send();

        checkStatusCode(response, 400);

        expect(response.getContent()).asJson()
                .check(
                        isObject()
                                .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                .anyOtherValues()
                );


        return CheckResult.correct();
    }

    CheckResult testReturnTicket() {

        HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                        "row", 2,
                        "column", 5
                ))
        ).send();

        checkStatusCode(response, 200);

        expect(response.getContent()).asJson()
                .check(
                        isObject()
                                .value("token", isString())
                                .value("ticket",
                                        isObject()
                                                .value("row", 2)
                                                .value("column", 5)
                                                .value("price", 10)
                                )
                );

        JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

        String tokenFromResponse = jsonResponse.get("token").getAsString();
        String wrongToken = UUID.randomUUID().toString();

        try {
            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", wrongToken
                    ))
            ).send();
        } catch (PresentationError e) {
            return CheckResult.wrong("An error occurred while trying to send POST /return with wrong token. " +
                    "In such scenario your program should respond with a 400 status code.");
        }

        checkStatusCode(response, 400);

        expect(response.getContent()).asJson().check(
                isObject()
                        .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                        .anyOtherValues()
        );

        response = post(
                "/return",
                gson.toJson(Map.of(
                        "token", tokenFromResponse
                ))
        ).send();

        checkStatusCode(response, 200);

        expect(response.getContent()).asJson().check(
                isObject()
                        .value("ticket",
                                isObject()
                                        .value("row", 2)
                                        .value("column", 5)
                                        .value("price", 10)
                        )
        );

        return CheckResult.correct();
    }

    CheckResult testStatsEndpoint() {

        HttpResponse response = get("/stats").addParams(Map.of()).send();
        checkStatusCode(response, 401);

        expect(response.getContent()).asJson().check(
                isObject()
                        .value("error", WRONG_PASSWORD_MESSAGE)
                        .anyOtherValues()
        );


        return CheckResult.correct();
    }

    CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
        Map<String, String> requestParams = Map.of("password", "super_secret");
        HttpResponse response = get("/stats").addParams(requestParams).send();
        checkStatusCode(response, 200);

        expect(response.getContent()).asJson().check(
                isObject()
                        .value("purchased", numberOfPurchasedTickets)
                        .value("income", currentIncome)
                        .value("available", availableSeats)
        );

        return CheckResult.correct();
    }

    CheckResult returnTicket() {
        HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                        "token", token
                ))
        ).send();

        expect(response.getContent()).asJson().check(
                isObject()
                        .value("ticket",
                                isObject()
                                        .value("row", 7)
                                        .value("column", 4)
                                        .value("price", 8)
                        )
        );

        return CheckResult.correct();
    }

    CheckResult testPurchaseAnotherTicket() {
        HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                        "row", "7",
                        "column", "4"
                ))
        ).send();

        checkStatusCode(response, 200);

        expect(response.getContent()).asJson()
                .check(
                        isObject()
                                .value("token", isString())
                                .value("ticket",
                                        isObject()
                                                .value("row", 7)
                                                .value("column", 4)
                                                .value("price", 8)
                                )
                );

        JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
        token = object.get("token").getAsString();

        return CheckResult.correct();
    }

    CheckResult testTokenInvalidation() {

        HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                        "row", 3,
                        "column", 6
                ))
        ).send();

        checkStatusCode(response, 200);

        expect(response.getContent()).asJson().check(
                isObject()
                        .value("token", isString())
                        .value("ticket",
                                isObject()
                                        .value("row", 3)
                                        .value("column", 6)
                                        .value("price", 10)
                        )
        );

        JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
        String tokenFromResponse = jsonResponse.get("token").getAsString();

        response = post(
                "/return",
                gson.toJson(Map.of(
                        "token", tokenFromResponse
                ))
        ).send();

        checkStatusCode(response, 200);

        expect(response.getContent()).asJson().check(
                isObject()
                        .value("ticket",
                                isObject()
                                        .value("row", 3)
                                        .value("column", 6)
                                        .value("price", 10)
                        )
        );

        response = post(
                "/return",
                gson.toJson(Map.of(
                        "token", tokenFromResponse
                ))
        ).send();

        checkStatusCode(response, 400);

        expect(response.getContent()).asJson().check(
                isObject()
                        .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                        .anyOtherValues()
        );

        return CheckResult.correct();
    }

    CheckResult testReturnedTicketAvailability() {

        HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                        "row", 3,
                        "column", 6
                ))
        ).send();

        checkStatusCode(response, 200);

        expect(response.getContent()).asJson().check(
                isObject()
                        .value("token", isString())
                        .value("ticket",
                                isObject()
                                        .value("row", 3)
                                        .value("column", 6)
                                        .value("price", 10)
                        )
        );

        JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
        String tokenFromResponse = jsonResponse.get("token").getAsString();

        response = post(
                "/return",
                gson.toJson(Map.of(
                        "token", tokenFromResponse
                ))
        ).send();

        checkStatusCode(response, 200);

        expect(response.getContent()).asJson().check(
                isObject()
                        .value("ticket",
                                isObject()
                                        .value("row", 3)
                                        .value("column", 6)
                                        .value("price", 10)
                        )
        );

        response = post(
                "/purchase",
                gson.toJson(Map.of(
                        "row", 3,
                        "column", 6
                ))
        ).send();

        checkStatusCode(response, 200);

        expect(response.getContent()).asJson().check(
                isObject()
                        .value("token", isString())
                        .value("ticket",
                                isObject()
                                        .value("row", 3)
                                        .value("column", 6)
                                        .value("price", 10)
                        )
        );

        return CheckResult.correct();
    }

    @DynamicTest
    DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
            this::testTokenInvalidation,
            this::testReturnedTicketAvailability
    };
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/build.gradle ===
apply plugin: 'hyperskill'

subprojects {
    apply plugin: 'application'
    apply plugin: 'java'

    def userJava = Integer.parseInt(JavaVersion.current().getMajorVersion())
    def hsJava = Integer.parseInt(hs.java.version)
    def testJava = Math.max(userJava, hsJava)

    java.toolchain.languageVersion = JavaLanguageVersion.of(testJava)

    compileJava {
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(userJava)
        }
    }

    compileTestJava {
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(testJava)
        }
    }

    repositories {
        mavenCentral()
        maven { url 'https://packages.jetbrains.team/maven/p/hyperskill-hs-test/maven' }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        testImplementation 'com.github.hyperskill:hs-test:release-SNAPSHOT'
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    sourceSets {
        main.java.srcDir 'src'
        test.java.srcDir 'test'
    }

    test {
        systemProperty "file.encoding", "utf-8"
        outputs.upToDateWhen { false }
    }

    compileJava.options.encoding = 'utf-8'
    tasks.withType(JavaCompile) {
        options.encoding = 'utf-8'
    }
}

project(':util') {
    dependencies {
        implementation 'com.github.hyperskill:hs-test:release-SNAPSHOT'
    }
}

configure(subprojects.findAll {it.name != 'util'}) {
    dependencies {
        testImplementation project(':util').sourceSets.main.output
        testImplementation project(':util').sourceSets.test.output
    }
}

wrapper {
    gradleVersion = hs.gradle.version
}
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/course-info.yaml ===
type: hyperskill
title: Cinema Room REST Service with Java
language: English
summary: "<div>\r\n<div>You will practice concepts frequently tested in technical\
  \ interviews at top tech companies.</div>\r\n\r\n<p>Always wanted to have your private\
  \ movie theater and screen only the movies you like? You can buy a fancy projector\
  \ and set it up in a garage, but how can you sell tickets? The idea of a ticket\
  \ booth is old-fashioned, so let's create a special service for that! Make good\
  \ use of Spring and write a REST service that can show the available seats, sell\
  \ and refund tickets, and display the statistics of your venue. Pass me the popcorn,\
  \ please!</p>\r\n</div><br/><br/>Learn more at <a href=\"https://hyperskill.org/projects/189?utm_source=ide&utm_medium=ide&utm_campaign=ide&utm_content=project-card\"\
  >https://hyperskill.org/projects/189</a>"
programming_language: Java
programming_language_version: 11
content:
  - Cinema Room REST Service with Java
additional_files:
  - name: build.gradle
  - name: settings.gradle
mode: Study
yaml_version: 2

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/course-remote-info.yaml ===
hyperskill_project:
  id: 189
  ide_files: https://hyperskill.org/api/projects/189/additional-files/additional_files.json
  is_template_based: false
  use_ide: true
update_date: "Thu, 01 Jan 1970 00:00:00 UTC"
stages:
  - id: 945
    step: 13375
    is_completed: true
  - id: 946
    step: 13376
    is_completed: true
  - id: 947
    step: 13377
    is_completed: true
  - id: 948
    step: 13378
    is_completed: true
topics:
  0:
    - title: Data structures
      theory_id: 40371
    - title: Abstract and concrete data structures
      theory_id: 16927
    - title: "Write, compile, and run"
      theory_id: 3739
    - title: "Basic terms: JVM, JRE, JDK"
      theory_id: 3499
    - title: Operating systems
      theory_id: 9704
    - title: Command line overview
      theory_id: 8977
    - title: Parameters and options
      theory_id: 9746
    - title: Compile and run Java from CLI
      theory_id: 3746
    - title: IDE
      theory_id: 10996
    - title: Spring and Spring Boot frameworks
      theory_id: 7944
    - title: Getting started with Spring Boot
      theory_id: 6336
    - title: Immutability
      theory_id: 7929
    - title: Fixed-size array
      theory_id: 20078
    - title: Dynamic array
      theory_id: 5357
    - title: Basic project structure
      theory_id: 6339
    - title: IoC Container
      theory_id: 16851
    - title: Spring beans
      theory_id: 14641
    - title: Spring components
      theory_id: 14652
    - title: World Wide Web
      theory_id: 6633
    - title: "HTTP: HyperText Transfer Protocol"
      theory_id: 6569
    - title: HTTP URL
      theory_id: 6740
    - title: HTTP messages
      theory_id: 6752
    - title: REST
      theory_id: 7834
    - title: Introduction to Spring Web MVC
      theory_id: 13611
    - title: Postman
      theory_id: 8512
    - title: Introduction to Java
      theory_id: 38627
    - title: "Basic literals: numbers, strings and characters"
      theory_id: 3522
    - title: Writing first program
      theory_id: 3521
    - title: Printing data
      theory_id: 3749
    - title: Types and variables
      theory_id: 3518
    - title: Comments
      theory_id: 3520
    - title: Reading user's input with Scanner
      theory_id: 9055
    - title: Coding style conventions
      theory_id: 12411
    - title: Naming variables
      theory_id: 3513
    - title: Arithmetic operations
      theory_id: 3519
    - title: Integer types and operations
      theory_id: 3565
    - title: Increment and decrement
      theory_id: 5008
    - title: Floating-point types and operations
      theory_id: 3517
    - title: Boolean type and operations. True and false
      theory_id: 3516
    - title: Comparing values. Relational operators
      theory_id: 3512
    - title: Conditional statement
      theory_id: 3503
    - title: One-line condition with ternary operator
      theory_id: 3506
    - title: For loop
      theory_id: 3505
    - title: While and do-while loops
      theory_id: 3498
    - title: Break and continue. Branching
      theory_id: 3507
    - title: Declaring methods
      theory_id: 10982
    - title: Method "main"
      theory_id: 3489
    - title: "Multiple conditions: switch"
      theory_id: 3504
    - title: Functional decomposition
      theory_id: 10570
    - title: Overloading
      theory_id: 3525
    - title: Primitive data types and their sizes
      theory_id: 3532
    - title: Type casting
      theory_id: 3510
    - title: Calling methods
      theory_id: 10973
    - title: Primitive and reference types
      theory_id: 5035
    - title: Array
      theory_id: 3511
    - title: Arrays as parameters
      theory_id: 3594
    - title: Iterating over arrays
      theory_id: 3602
    - title: Characters
      theory_id: 3514
    - title: String
      theory_id: 3523
    - title: Constants. Final variables
      theory_id: 7427
    - title: Errors in programs
      theory_id: 3536
    - title: First glance at exceptions
      theory_id: 3497
    - title: NullPointerException
      theory_id: 1945
    - title: What is object-oriented programming
      theory_id: 3614
    - title: Build tools
      theory_id: 4284
    - title: JAR files
      theory_id: 4311
    - title: "Gradle: overview"
      theory_id: 5075
    - title: Basic project with Gradle
      theory_id: 5077
    - title: Building apps using Gradle
      theory_id: 7917
    - title: Gradle build configuration
      theory_id: 35988
    - title: "Dependency management: repositories"
      theory_id: 37189
    - title: External resources
      theory_id: 6216
    - title: Libraries
      theory_id: 8504
    - title: Frameworks
      theory_id: 6701
    - title: Concept of design patterns
      theory_id: 3611
    - title: What are bugs
      theory_id: 5504
    - title: Functional testing
      theory_id: 13438
    - title: Unit testing
      theory_id: 7545
    - title: Dependency injection
      theory_id: 20580
    - title: Multidimensional array
      theory_id: 1933
    - title: Introduction to software architecture
      theory_id: 15368
    - title: Class Diagrams
      theory_id: 15588
    - title: Interfaces
      theory_id: 9640
    - title: YAML
      theory_id: 12722
    - title: Code organization. Design principles
      theory_id: 8956
    - title: Coupling and cohesion
      theory_id: 21478
    - title: Debugging overview
      theory_id: 14368
    - title: JSON
      theory_id: 6854
    - title: Introduction to API
      theory_id: 17007
    - title: IntelliJ IDEA
      theory_id: 37202
    - title: Run and debug with IntelliJ IDEA
      theory_id: 37206
    - title: Debugging simple constructs
      theory_id: 16479
    - title: Debugging methods
      theory_id: 52095
    - title: IntelliJ IDEA run configurations
      theory_id: 10630
    - title: Getting data from REST
      theory_id: 13287
    - title: Introduction to generic programming
      theory_id: 3492
    - title: Generics and Object
      theory_id: 3493
    - title: What are collections
      theory_id: 3770
    - title: The Collections framework overview
      theory_id: 3624
    - title: ArrayList
      theory_id: 3567
    - title: The List interface
      theory_id: 3581
    - title: Creational design patterns
      theory_id: 16251
    - title: Factory Method and Prototype
      theory_id: 16430
    - title: MVC
      theory_id: 17197
    - title: Defining classes
      theory_id: 3618
    - title: Instance methods
      theory_id: 3495
    - title: Grouping classes with packages
      theory_id: 3621
    - title: Initializing new instances. Constructor
      theory_id: 3535
    - title: Access modifiers
      theory_id: 3589
    - title: Getters and setters
      theory_id: 3599
    - title: Inheritance
      theory_id: 3583
    - title: Protected modifier
      theory_id: 6692
    - title: Referencing subclass objects
      theory_id: 3585
    - title: Object class
      theory_id: 3596
    - title: Multiple constructors
      theory_id: 3538
    - title: Keyword "super"
      theory_id: 3588
    - title: Adding annotations
      theory_id: 3622
    - title: Objects and their properties
      theory_id: 4727
    - title: Static members
      theory_id: 3534
    - title: Method overriding
      theory_id: 3572
    - title: Polymorphism
      theory_id: 3587
    - title: Declaring functionality with interfaces
      theory_id: 3615
    - title: Wrapping classes. Boxing
      theory_id: 3595
  1:
    - title: Modulo division
      theory_id: 10586
    - title: Exception handling in Spring Boot
      theory_id: 8780
    - title: Hierarchy of exceptions
      theory_id: 3570
    - title: Exception handling
      theory_id: 3552
    - title: "Synchronous, asynchronous, parallel"
      theory_id: 9332
    - title: Processes and threads
      theory_id: 9420
    - title: Introduction to logging
      theory_id: 5538
    - title: Debugging techniques
      theory_id: 13775
    - title: "Hashing: overview"
      theory_id: 9831
    - title: Hash function
      theory_id: 30143
    - title: Hash table
      theory_id: 13054
    - title: Posting and deleting data via REST
      theory_id: 13292
    - title: Handling requests with bodies
      theory_id: 13334
    - title: Customizing REST responses
      theory_id: 33247
    - title: Lambda expressions
      theory_id: 11635
    - title: The Set interface
      theory_id: 3575
    - title: Threads as objects
      theory_id: 4875
    - title: Custom threads
      theory_id: 4876
    - title: Thread management
      theory_id: 3619
    - title: Exceptions in threads
      theory_id: 4882
    - title: Shared data
      theory_id: 3610
    - title: Thread synchronization
      theory_id: 3557
    - title: Collections and thread-safety
      theory_id: 4984
    - title: The Map interface
      theory_id: 3558
    - title: Thread-safe maps
      theory_id: 17081
  2:
    - title: Advanced exception handling in Spring Boot
      theory_id: 19855

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/gradle/wrapper/gradle-wrapper.properties ===
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.5-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/gradlew ===
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/gradlew.bat ===
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/Cinema Room REST Service with Java/settings.gradle ===
buildscript {
  repositories {
    maven { url 'https://packages.jetbrains.team/maven/p/hyperskill-hs-test/maven' }
    maven { url 'https://jitpack.io' }
  }

  dependencies {
    classpath "com.github.hyperskill:hs-gradle-plugin:release-SNAPSHOT"
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }
}


static String sanitizeName(String name) {
      return name.replaceAll("[ /\\\\:<>\"?*|()]", "_").replaceAll("(^[.]+)|([.]+\$)", "")
}

rootProject.projectDir.eachDirRecurse {
  if (!isTaskDir(it) || it.path.contains(".idea")) {
    return
  }
  def taskRelativePath = rootDir.toPath().relativize(it.toPath())
  def parts = []
  for (name in taskRelativePath) {
    parts.add(sanitizeName(name.toString()))
  }
  def moduleName =  parts.join("-")
  include "$moduleName"
  project(":$moduleName").projectDir = it
}

def isTaskDir(File dir) {
  return new File(dir, "src").exists() || new File(dir, "test").exists()
}

include 'util'
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/.gitignore ===
# Java
*.class
*.jar
*.war
*.ear

# Gradle
.gradle/
build/
out/

# IntelliJ IDEA
.idea/
*.iml
*.ipr
*.iws

# Logs
*.log
logs/

# OS-specific
.DS_Store
Thumbs.db

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/Basics unveiled/task-info.yaml ===
type: edu
files:
  - name: src/qrcodeapi/Application.java
    visible: true
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    learner_created: false
  - name: test/QRCodeApiTest.java
    visible: false
    learner_created: false
  - name: build.gradle
    visible: true
    learner_created: false
  - name: src/qrcodeapi/QRCodeController.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/35505#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 16 Apr 2025 19:20:32 UTC"
record: 1

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/Basics unveiled/task-remote-info.yaml ===
id: 35505
update_date: "Mon, 06 Nov 2023 16:19:35 UTC"

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/Basics unveiled/task.html ===
<div class="step-text">
<h5 id="description">Description</h5>
<p>Our project begins with REST API endpoints. Given the straightforward functionality of this project, our API will only need two endpoints.</p>
<p>The first endpoint <code class="java">GET /api/health</code> will consistently respond with the status code <code class="java">200 OK</code>. This endpoint allows clients to ping the service, verifying its operation and availability.</p>
<p>The second endpoint, <code class="java">GET /api/qrcode</code>, will be utilized by clients to retrieve QR code images. The necessary logic for this will be implemented in subsequent stages. For the time being, it should respond with the status code <code class="java">501 NOT IMPLEMENTED</code>.</p>
<h5 id="objectives">Objectives</h5>
<p>Kick off the project by creating a Spring Boot web application. This application should be operable on any free port. You may use the default port <code class="java">8080</code> or designate another port in the application.properties file. For example:</p>
<pre><code class="language-no-highlight">server.port=8181</code></pre>
<p>Next, create a REST Controller that will manage two endpoints:</p>
<ul>
<li><code class="java">GET /api/health</code> endpoint that will respond with a status code <code class="java">200 OK</code>.</li>
<li><code class="java">GET /api/qrcode</code> endpoint that will respond with a status code <code class="java">501 NOT IMPLEMENTED</code>.</li>
</ul>
<h5 id="examples">Examples</h5>
<p><strong>Example 1</strong>. <em>a GET request to /api/health</em>:</p>
<p><em>Response</em>: <code class="java">200 OK</code></p>
<p><strong>Example 2</strong>. <em>a GET request to /api/qrcode</em>:</p>
<p><em>Response</em>: <code class="java">501 NOT IMPLEMENTED</code></p>

</div>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/First image/task-info.yaml ===
type: edu
files:
  - name: src/qrcodeapi/Application.java
    visible: true
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    learner_created: false
  - name: build.gradle
    visible: true
    learner_created: false
  - name: test/QRCodeApiTest.java
    visible: false
    learner_created: false
  - name: src/qrcodeapi/QRCodeController.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/35506#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 16 Apr 2025 19:27:41 UTC"
record: 2

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/First image/task-remote-info.yaml ===
id: 35506
update_date: "Mon, 06 Nov 2023 16:19:30 UTC"

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/First image/task.html ===
<div class="step-text">
<h5 id="description">Description</h5>
<p>QR codes are square-shaped patterns comprised of black squares on a white background. Your web service will generate QR codes and send them to clients as images.</p>
<p>In this stage, you must create a 250x250 pixel image filled with white color. You can accomplish this using the <code class="language-java">java.awt.image.BufferedImage</code> class, which allows for image data manipulation. Here's an example:</p>
<pre><code class="language-java">import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;


BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
Graphics2D g = image.createGraphics();

g.setColor(Color.WHITE);
g.fillRect(0, 0, width, height);</code></pre>
<p>In this example, first, create a <code class="language-java">BufferedImage</code> object with the specified width and height and an 8-bit RGB color space. Then, generate a <code class="language-java">Graphics2D</code> object to draw into the image. Set the color to white and draw a rectangle to fill the image with white color.</p>
<p>Next, serialize the <code class="language-java">BufferedImage</code> and include it in the response body. There are several ways to do this, but we recommend the following two methods:</p>
<ul>
<li>Return the <code class="language-java">BufferedImage</code> from your request handler method and let Spring Boot serialize it for you. You'll need to create a <code class="language-java">HttpMessageConverter&lt;BufferedImage&gt;</code> bean to facilitate the serialization:</li>
<li>
<pre><code class="language-java">// in the REST controller class

@GetMapping(path = "/api/qrcode")
public ResponseEntity&lt;BufferedImage&gt; getImage() {
    BufferedImage bufferedImage = ... // your BufferedImage source
    return ResponseEntity
            .ok()
            .contentType(MediaType.IMAGE_PNG)
            .body(bufferedImage);
}


// in a configuration class

@Bean
public HttpMessageConverter&lt;BufferedImage&gt; bufferedImageHttpMessageConverter() {
    return new BufferedImageHttpMessageConverter();
}</code></pre>
</li>
<li>Serialize the <code class="language-java">BufferedImage</code> into a byte array and return that array from your request handler method. For serialization, you can use the following method: 
    <pre><code class="language-java">@GetMapping(path = "/api/qrcode")
public ResponseEntity&lt;byte[]&gt; getImage() throws IOException {
    BufferedImage bufferedImage = ... // your BufferedImage source

    try (var baos = new ByteArrayOutputStream()) {
        ImageIO.write(bufferedImage, "png", baos); // writing the image in the PNG format
        byte[] bytes = baos.toByteArray();
        return ResponseEntity
                .ok()
                .contentType(MediaType.IMAGE_PNG)
                .body(bytes);
    } catch (IOException e) {
        // handle the IOEexception
    }
}</code></pre>
</li>
</ul>
<p></p><div class="alert alert-warning">It's important to programmatically create the image, as image editors can embed metadata in the image file, which could cause tests to fail.</div>
<h5 id="objectives">Objectives</h5>
<p>In this stage, you should:</p>
<ul>
<li>Modify the <code class="language-java">GET /api/qrcode</code> to return the status code <code class="language-java">200 OK</code> and an image as the response body. The image must be a white square, 250x250 pixels, in PNG format.</li>
<li>Set the correct <code class="language-java">Content-Type</code> header of the response to indicate that the content type is <code class="language-java">image/png</code>.</li>
</ul>
<h5 id="examples">Examples</h5>
<p><strong>Example 1</strong>. <em>a GET request to /api/health</em>:</p>
<p><em>Response</em>: <code class="language-java">200 OK</code></p>
<p><strong>Example 2</strong>. <em>a GET request to /api/qrcode</em>:</p>
<p><em>Response code</em>: <code class="language-java">200 OK</code></p>
<p><em>Response header</em>: <code class="language-java">Content-Type: image/png</code></p>
<p><em>Response body</em>: byte array</p>
</div>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/Foolproof API/task-info.yaml ===
type: edu
files:
  - name: src/qrcodeapi/Application.java
    visible: true
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    learner_created: false
  - name: build.gradle
    visible: true
    learner_created: false
  - name: test/QRCodeApiTest.java
    visible: false
    learner_created: false
  - name: src/qrcodeapi/QRCodeController.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/35509#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 16 Apr 2025 20:58:36 UTC"
record: -1

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/Foolproof API/task-remote-info.yaml ===
id: 35509
update_date: "Tue, 09 Apr 2024 08:33:28 UTC"

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/Foolproof API/task.html ===
<div class="step-text">
<p></p><h5 id="description">Description</h5><p>QR codes have four error correction levels, determining how much code can be damaged or obscured while still readable. These levels are:</p><ol><li><p><strong>Level L (Low)</strong>: The QR code can withstand up to approximately 7% damage.</p></li><li><p><strong>Level M (Medium)</strong>: The QR code can withstand up to approximately 15% damage.</p></li><li><p><strong>Level Q (Quartile)</strong>: The QR code can withstand up to approximately 25% damage.</p></li><li><p><strong>Level H (High)</strong>: The QR code can withstand up to approximately 30% damage.</p></li></ol><p>These levels provide a trade-off between data capacity and resilience. Higher error correction levels require more space, reducing the amount of data that can be stored in the QR code. In this stage, the service should be able to handle a new request parameter, <code class="language-java">correction</code> that defines the error correction level desired by the client. The accepted <code class="language-java">correction</code> values should be <code class="language-java">L</code>, <code class="language-java">M</code>, <code class="language-java">Q</code> and <code class="language-java">H</code>. If a client specifies an incorrect correction level, the service should respond with the status code <code class="language-java">400 BAD REQUEST</code> and a JSON with the <code class="language-java">error</code> field and an appropriate error message. </p><p>If a request contains multiple invalid parameters, the error messages should have the following priority:</p><p>invalid contents &gt; invalid size &gt; invalid correction &gt; invalid type</p><p>To implement different error correction levels, use the overloaded version of the <code class="language-java">encode</code> method of the <code class="language-java">QRCodeWriter</code> class. Besides the contents, barcode format, width, and height, it accepts encoder hints represented by a <code class="language-java">Map</code> where keys are constants of the <code class="language-java">EncodeHintType</code> and values are appropriate objects. It may sound confusing, but don't worry, we will explore a practical example. In our case, we need the specific <code class="language-java">EncodeHintType</code> as key, which is the <code class="language-java">EncodeHintType.ERROR_CORRECTION</code>. As a value, we will have to use the constants of the <code class="language-java">ErrorCorrectionLevel</code> enum, namely <code class="language-java">ErrorCorrectionLevel.L</code>, <code class="language-java">ErrorCorrectionLevel.M</code>, <code class="language-java">ErrorCorrectionLevel.Q</code> or <code class="language-java">ErrorCorrectionLevel.H</code>. Here is the updated version of the QR code generation:</p><pre><code class="language-java">import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

QRCodeWriter writer = new QRCodeWriter();
Map&lt;EncodeHintType, ?&gt; hints = Map.of(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
try {
    BitMatrix bitMatrix = writer.encode(contents, BarcodeFormat.QR_CODE, width, height, hints);
    BufferedImage bufferedImage = MatrixToImageWriter.toBufferedImage(bitMatrix);
} catch (WriterException e) {
    // handle the WriterException
}</code></pre><p>In addition to the parameters, we have created the <code class="language-java">Map</code> of encode hints and set the error correction level to <code class="language-java">H</code> (high). To set the medium error correction level, you will need to replace <code class="language-java">ErrorCorrectionLevel.H</code> with the relevant value. That's it!</p><p>In addition, let's make the QR code API more user-friendly. Now, all parameters except for <code class="language-java">contents</code> should be optional and should have default values. If a client does not specify a particular request parameter, apply the corresponding default value:</p><ul><li><p>default <code class="language-java">size</code> is <code class="language-java">250</code></p></li><li><p>default <code class="language-java">correction</code> is <code class="language-java">L</code></p></li><li><p>default <code class="language-java">type</code> is <code class="language-java">png</code></p></li></ul><p>If a client specifies an invalid value for an optional parameter, the service should respond with the status code <code class="language-java">400 BAD REQUEST</code>, a JSON with the <code class="language-java">error</code> field, and an appropriate error message. The exact requirements as in the previous stage apply.</p><h5 id="objectives">Objectives</h5><ul><li><p>Modify the <code class="language-java">GET /api/qrcode</code> endpoint to accept a new parameter, <code class="language-java">correction</code>, which represents the desired QR code error correction level and can only have values <code class="language-java">L</code>, <code class="language-java">M</code>, <code class="language-java">Q</code> or <code class="language-java">H</code>.</p></li><li><p>Generate a QR code from the provided content, applying parameters from the request, including the error correction level.</p></li><li><p>If the provided <code class="language-java">correction</code> is not valid, the endpoint should return the status code <code class="language-java">400 BAD REQUEST</code> and a request body in the JSON format with the following contents:</p><pre><code class="language-json">{
    "error": "Permitted error correction levels are L, M, Q, H"
}</code></pre></li><li><p>The requirements for handling the other request parameters remain unchanged. If a request contains multiple invalid parameters, the error messages should have the following priority: invalid contents =&gt; invalid size =&gt; invalid correction =&gt; invalid type.</p></li><li><p>All request parameters except for the contents should be optional and have the following default values: default <code class="language-java">size</code> is <code class="language-java">250</code>, default <code class="language-java">correction</code> is <code class="language-java">L</code> , and default <code class="language-java">type</code> is <code class="language-java">png</code>.</p></li></ul><h5 id="examples">Examples</h5><p><strong>Example 1</strong>. <em>a GET request to /api/qrcode with a correct contents and default other parameters</em>:</p><p><em>Request</em>: <code class="language-java">GET /api/qrcode?contents=abcdef</code></p><p><em>Response code</em>: <code class="language-java">200 OK</code></p><p><em>Response header</em>: <code class="language-java">Content-Type: image/png</code></p><p><em>Response body:</em> byte array</p><p><strong>Example 2</strong>. <em>a GET request to /api/qrcode with an incorrect correction parameter</em>:</p><p><em>Request</em>: <code class="language-java">GET /api/qrcode?contents=abcde&amp;correction=S</code></p><p><em>Response code</em>: <code class="language-java">400 BAD REQUEST</code></p><p><em>Response body</em>:</p><pre><code class="language-json">{
    "error": "Permitted error correction levels are L, M, Q, H"
}</code></pre><p><strong>Example 3</strong>. <em>a GET request to /api/qrcode with incorrect contents and correction parameters</em>:</p><p><em>Request</em>: <code class="language-java">GET /api/qrcode?contents=&amp;correction=S</code></p><p><em>Response code</em>: <code class="language-java">400 BAD REQUEST</code></p><p><em>Response body</em>:</p><pre><code class="language-json">{
    "error": "Contents cannot be null or blank"
}</code></pre><p><strong>Example 4</strong>. <em>a GET request to /api/qrcode with an incorrect correction and type parameters</em>:</p><p><em>Request</em>: <code class="language-java">GET /api/qrcode?contents=abcde&amp;correction=S&amp;type=tiff</code></p><p><em>Response code</em>: <code class="language-java">400 BAD REQUEST</code></p><p><em>Response body</em>:</p><pre><code class="language-json">{
    "error": "Permitted error correction levels are L, M, Q, H"
}</code></pre>
</div>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/Image parameters/task-info.yaml ===
type: edu
files:
  - name: src/qrcodeapi/Application.java
    visible: true
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    learner_created: false
  - name: build.gradle
    visible: true
    learner_created: false
  - name: test/QRCodeApiTest.java
    visible: false
    learner_created: false
  - name: src/qrcodeapi/QRCodeController.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/35507#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 16 Apr 2025 19:32:18 UTC"
record: 3

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/Image parameters/task-remote-info.yaml ===
id: 35507
update_date: "Sat, 28 Sep 2024 18:15:21 UTC"

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/Image parameters/task.html ===
<div class="step-text">
<p></p><h5 id="description">Description</h5><p>In this stage, your task is to add versatility to the QR code service by allowing it to handle different request parameters. This will enable the generation of QR code images with various sizes and formats, as opposed to the same image every time.</p><p>Clients may need images in different formats and sizes, which requires the modification of the <code class="language-json">GET /api/qrcode</code> endpoint to accept two request parameters:</p><ul><li><p><code class="language-json">size</code>: this parameter, measured in pixels, should be within a reasonable range. If the value is less than 150 pixels or exceeds 350 pixels, the endpoint should respond with the status code <code class="language-json">400 BAD REQUEST</code>, accompanied by a JSON containing the <code class="language-json">error</code> field and a suitable error message.</p></li><li><p><code class="language-json">type</code>: the image can be in <em>PNG</em>, <em>JPEG</em>, or <em>GIF</em> format. The endpoint should return the generated image in the requested format, including setting the appropriate <code class="language-json">Content-Type</code> header. If the parameter value doesn't match these three formats, the endpoint should respond with the status code <code class="language-json">400 BAD REQUEST</code> and a JSON containing the <code class="language-json">error</code> field and a suitable error message.</p></li></ul><p>Both parameters are mandatory. However, you don't need to account for missing parameters; the default Spring Boot behavior will suffice.</p><h5 id="objectives">Objectives</h5><ul><li><p>Modify the <code class="language-json">GET /api/qrcode</code> endpoint to accept the <code class="language-json">size</code> request parameter. If the parameter value ranges between 150 and 350 pixels (inclusive), return the status code <code class="language-json">200 OK</code> and the image of the requested size. Bear in mind that QR code images are square! If the parameter value is outside this range, return the status code <code class="language-json">400 BAD REQUEST</code> along with a JSON-formatted request body containing the following:</p><pre><code class="language-json">{
  "error": "Image size must be between 150 and 350 pixels"
}</code></pre></li><li><p>Modify the <code class="language-json">GET /api/qrcode</code> endpoint to accept the <code class="language-json">type</code> request parameter. If the parameter value is either <code class="language-json">png</code>, <code class="language-json">jpeg</code>, or <code class="language-json">gif</code>, return the status code <code class="language-json">200 OK</code> and the image in the requested format. Don't forget to set the correct <code class="language-json">Content-Type</code> header in the response! If the parameter value doesn't match any of the three accepted types, return the status code <code class="language-json">400 BAD REQUEST</code>, along with a JSON-formatted request body containing the following:</p><pre><code class="language-json">{
  "error": "Only png, jpeg and gif image types are supported"
}</code></pre></li><li><p>If both the <code class="language-json">size</code> and the <code class="language-json">type</code> parameters are invalid, return the error message related to the <code class="language-json">size</code> parameter.</p></li><li><p>Aside from these modifications, the image generation and serialization process remains unchanged.</p></li></ul><h5 id="examples">Examples</h5><p><strong>Example 1</strong>. <em>a GET request to /api/qrcode with the correct size and type parameters</em>:</p><p><em>Request</em>: <code class="language-json">GET /api/qrcode?size=250&amp;type=png</code></p><p><em>Response code</em>: <code class="language-json">200 OK</code></p><p><em>Response header</em>: <code class="language-json">Content-Type: image/png</code></p><p><em>Response body:</em> byte array</p><p><strong>Example 2</strong>. <em>a GET request to /api/qrcode with an incorrect size parameter</em>:</p><p><em>Request</em>: <code class="language-json">GET /api/qrcode?size=100&amp;type=png</code></p><p><em>Response code</em>: <code class="language-json">400 BAD REQUEST</code></p><p><em>Response body</em>:</p><pre><code class="language-json">{
    "error": "Image size must be between 150 and 350 pixels"
}</code></pre><p><strong>Example 3</strong>. <em>a GET request to /api/qrcode with an incorrect type parameter</em>:</p><p><em>Request</em>: <code class="language-json">GET /api/qrcode?size=250&amp;type=tiff</code></p><p><em>Response code</em>: <code class="language-json">400 BAD REQUEST</code></p><p><em>Response body</em>:</p><pre><code class="language-json">{
    "error": "Only png, jpeg and gif image types are supported"
}</code></pre>
</div>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/Zebra crossing/task-info.yaml ===
type: edu
files:
  - name: src/qrcodeapi/Application.java
    visible: true
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    learner_created: false
  - name: build.gradle
    visible: true
    learner_created: false
  - name: test/QRCodeApiTest.java
    visible: false
    learner_created: false
  - name: src/qrcodeapi/QRCodeController.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/35508#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 16 Apr 2025 19:43:28 UTC"
record: 4

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/Zebra crossing/task-remote-info.yaml ===
id: 35508
update_date: "Tue, 09 Apr 2024 08:33:28 UTC"

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/Zebra crossing/task.html ===
<div class="step-text">
<p></p><h5 id="description">Description</h5><p>Now that you've completed all the necessary preparations, let's start generating QR codes. QR codes, or Quick Response codes, are square-shaped patterns of black squares on a white background. The specific arrangement of these squares encodes information, which could be in the form of text, a URL, geolocation, or other data types.</p><p>Don't worry; you won't be implementing the data encoding algorithm from scratch. Use the <a href="https://github.com/zxing/zxing" rel="noopener noreferrer nofollow" target="_blank">ZXing open-source library</a> for this purpose.</p><p>First, add these dependencies to the <code class="language-java">build.gradle</code> file:</p><pre><code class="language-java">dependencies {
    // Spring Boot starters
    // ...

    implementation 'com.google.zxing:core:3.5.2'
    implementation 'com.google.zxing:javase:3.5.2'
}</code></pre><p>To generate a <code class="language-java">BufferedImage</code> from a <code class="language-java">String</code> representing some data, you can use the following code:</p><pre><code class="language-java">import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

class SomeClass {
    QRCodeWriter writer = new QRCodeWriter();
    try {
        BitMatrix bitMatrix = writer.encode(data, BarcodeFormat.QR_CODE, width, height);
        BufferedImage bufferedImage = MatrixToImageWriter.toBufferedImage(bitMatrix);
    } catch (WriterException e) {
        // handle the WriterException
    }
}</code></pre><p>Initialize a QRCodeWriter object, a part of the ZXing library, to generate a QR code from the provided data. Then, encode the data into a bit matrix by invoking the <code class="language-java">encode</code> method of the <code class="language-java">QRCodeWriter</code> object. This method takes three parameters: the data you want to encode in the QR code (in the <code class="language-java">String</code> format), the specific format of the barcode (in this case, <code class="language-java">BarcodeFormat.QR_CODE</code> for QR codes), and the desired width and height of the resulting image. The <code class="language-java">encode</code> method transforms the input data into a <code class="language-java">BitMatrix</code> object, essentially a 2D array representing the QR code in binary format (black and white squares). Finally, convert the bit matrix to a BufferedImage by using the <code class="language-java">toBufferedImage</code> method of the <code class="language-java">MatrixToImageWriter</code> class.</p><p>You'll need to update the <code class="language-java">GET /api/qrcode</code> endpoint to accept <code class="language-java">contents</code> as another request parameter. This is a mandatory parameter because you need something to encode, and it cannot be empty or blank. If a client submits valid <code class="language-java">contents</code>, <code class="language-java">size</code>, and <code class="language-java">type</code> request parameters, the QR code service should return the status code <code class="language-java">200 OK</code> and a QR code of the specified size, with the encoded contents in the specified format. If the <code class="language-java">contents</code> is not valid, the service should respond with the status code <code class="language-java">400 BAD REQUEST</code> and a JSON with the <code class="language-java">error</code> field and an appropriate error message.</p><p>All previous requirements for request parameter handling remain in effect. If any of the parameters is invalid, the service should respond with the status code <code class="language-java">400 BAD REQUEST</code> and the appropriate error message. If multiple parameters are not valid, the error messages should follow this priority order:</p><p>Note: invalid contents &gt; invalid size &gt; invalid type</p><h5 id="objectives">Objectives</h5><ul><li><p>Modify the <code class="language-java">GET /api/qrcode</code> endpoint to accept <code class="language-java">contents</code> as a new request parameter, in addition to the others.</p></li><li><p>If the <code class="language-java">contents</code> is a non-empty and non-blank string, generate a QR code from the <code class="language-java">contents</code> string and encode it into an image of the size specified by the <code class="language-java">size</code> parameter and in the format specified by the <code class="language-java">type</code> parameter. Return the status code <code class="language-java">200 OK</code> and the generated QR code image in the response body. Don't forget to set the correct <code class="language-java">Content-Type</code> header in the response.</p></li><li><p>If the <code class="language-java">contents</code> is empty or blank, the endpoint should return the status code <code class="language-java">400 BAD REQUEST</code> and a request body in the JSON format with the following contents:</p><pre><code class="language-json">{
    "error": "Contents cannot be null or blank"
}</code></pre></li><li><p>The error for invalid <code class="language-java">contents</code> should have the highest priority. The requirements for handling the other request parameters remain unchanged.</p></li></ul><h5 id="examples">Examples</h5><p><strong>Example 1</strong>. <em>a GET request to /api/qrcode with the correct contents, size and type parameters</em>:</p><p><em>Request</em>: <code class="language-java">GET /api/qrcode?contents=abcdef&amp;size=250&amp;type=png</code></p><p><em>Response code</em>: <code class="language-java">200 OK</code></p><p><em>Response header</em>: <code class="language-java">Content-Type: image/png</code></p><p><em>Response body:</em> byte array</p><p><strong>Example 2</strong>. <em>a GET request to /api/qrcode with an incorrect contents parameter</em>:</p><p><em>Request</em>: <code class="language-java">GET /api/qrcode?contents=&amp;size=200&amp;type=png</code></p><p><em>Response code</em>: <code class="language-java">400 BAD REQUEST</code></p><p><em>Response body</em>:</p><pre><code class="language-json">{
    "error": "Contents cannot be null or blank"
}</code></pre><p><strong>Example 3</strong>. <em>a GET request to /api/qrcode with incorrect contents, and type parameter</em>:</p><p><em>Request</em>: <code class="language-java">GET /api/qrcode?contents=&amp;size=250&amp;type=tiff</code></p><p><em>Response code</em>: <code class="language-java">400 BAD REQUEST</code></p><p><em>Response body</em>:</p><pre><code class="language-json">{
    "error": "Contents cannot be null or blank"
}</code></pre>
</div>
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/lesson-info.yaml ===
type: framework
content:
  - Basics unveiled
  - First image
  - Image parameters
  - Zebra crossing
  - Foolproof API
current_task: 4

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/task/build.gradle ===
buildscript {
    apply plugin: 'hyperskill'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
}

sourceSets.main.resources.srcDirs = ["src/resources"]

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.google.zxing:core:3.5.2'
    implementation 'com.google.zxing:javase:3.5.2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/task/src/qrcodeapi/Application.java ===
package qrcodeapi;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/task/src/qrcodeapi/QRCodeController.java ===
package qrcodeapi;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

@RestController
public class QRCodeController {

    @GetMapping("/api/health")
    public ResponseEntity<Void> healthCheck() {
        return ResponseEntity.ok().build();
    }

    /**
     * GET /api/qrcode
     * Mandatory: contents
     * Optional: size (default 250), correction (default L), type (default png)
     * <p>
     * Priority of error checks:
     *  1) Invalid contents
     *  2) Invalid size
     *  3) Invalid correction
     *  4) Invalid type
     */
    @GetMapping(value = "/api/qrcode")
    public ResponseEntity<?> getQRCode(
            @RequestParam(value = "contents") String contents,
            @RequestParam(value = "size", defaultValue = "250") int size,
            @RequestParam(value = "correction", defaultValue = "L") String correctionLevel,
            @RequestParam(value = "type", defaultValue = "png") String imageType
    ) {

        if (contents == null || contents.isBlank()) {
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body(new ErrorMessage("Contents cannot be null or blank"));
        }

        if (size < 150 || size > 350) {
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body(new ErrorMessage("Image size must be between 150 and 350 pixels"));
        }

        ErrorCorrectionLevel ecLevel;
        switch (correctionLevel.trim().toUpperCase()) {
            case "L":
                ecLevel = ErrorCorrectionLevel.L;
                break;
            case "M":
                ecLevel = ErrorCorrectionLevel.M;
                break;
            case "Q":
                ecLevel = ErrorCorrectionLevel.Q;
                break;
            case "H":
                ecLevel = ErrorCorrectionLevel.H;
                break;
            default:
                return ResponseEntity
                        .status(HttpStatus.BAD_REQUEST)
                        .body(new ErrorMessage("Permitted error correction levels are L, M, Q, H"));
        }

        String lowerType = imageType.trim().toLowerCase();
        if (!lowerType.equals("png") && !lowerType.equals("jpeg") && !lowerType.equals("gif")) {
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body(new ErrorMessage("Only png, jpeg and gif image types are supported"));
        }

        Map<EncodeHintType, Object> hints = new HashMap<>();
        hints.put(EncodeHintType.ERROR_CORRECTION, ecLevel);

        BufferedImage qrImage;
        try {
            QRCodeWriter writer = new QRCodeWriter();
            BitMatrix bitMatrix = writer.encode(contents, BarcodeFormat.QR_CODE, size, size, hints);
            qrImage = MatrixToImageWriter.toBufferedImage(bitMatrix);
        } catch (WriterException e) {
            return ResponseEntity
                    .status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ErrorMessage("Failed to generate QR code"));
        }

        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            ImageIO.write(qrImage, lowerType, baos);
            byte[] imageBytes = baos.toByteArray();

            MediaType mediaType = switch (lowerType) {
                case "gif" -> MediaType.IMAGE_GIF;
                case "jpeg" -> MediaType.IMAGE_JPEG;
                default -> MediaType.IMAGE_PNG;
            };

            return ResponseEntity
                    .ok()
                    .contentType(mediaType)
                    .body(imageBytes);
        } catch (IOException e) {
            return ResponseEntity
                    .status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ErrorMessage("Failed to serialize image"));
        }
    }

    /**
         * Helper class to return JSON errors.
         */
        private record ErrorMessage(String error) {
    }
}
=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/QRCode Service/task/test/QRCodeApiTest.java ===
import org.hyperskill.hstest.dynamic.DynamicTest;
import org.hyperskill.hstest.dynamic.input.DynamicTesting;
import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
import org.hyperskill.hstest.mocks.web.response.HttpResponse;
import org.hyperskill.hstest.stage.SpringTest;
import org.hyperskill.hstest.testcase.CheckResult;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Objects;

import static org.hyperskill.hstest.testing.expect.Expectation.expect;
import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

public class QRCodeApiTest extends SpringTest {
    private static final String BAD_SIZE_MSG = "Image size must be between 150 and 350 pixels";
    private static final String BAD_TYPE_MSG = "Only png, jpeg and gif image types are supported";
    private static final String BAD_CORRECTION_MSG = "Permitted error correction levels are L, M, Q, H";
    private static final String BAD_CONTENTS_MSG = "Contents cannot be null or blank";

    CheckResult testGetHealth() {
        var url = "/api/health";
        HttpResponse response = get(url).send();

        checkStatusCode(response, 200);

        return CheckResult.correct();
    }

    CheckResult testGetQrCode(String contents,
                              Integer size,
                              String correction,
                              String imgType,
                              String expectedHash) {

        var url = "/api/qrcode?contents=%s".formatted(encodeUrl(contents));
        if (size != null) {
            url += "&size=%d".formatted(size);
        }
        if (correction != null) {
            url += "&correction=%s".formatted(correction);
        }
        if (imgType != null) {
            url += "&type=%s".formatted(imgType);
        }
        HttpResponse response = get(url).send();

        checkStatusCode(response, 200);
        checkContentType(response, imgType);

        var contentHash = getMD5Hash(response.getRawContent());
        if (!contentHash.equals(expectedHash)) {
            return CheckResult.wrong("""
                    Response: GET %s
                     
                    Response body does not contain a correct image:
                    Expected image hash %s, but was %s
                    Make sure the size, the contents and the format of the image are correct.
                    
                    """.formatted(url, expectedHash, contentHash)
            );
        }

        return CheckResult.correct();
    }

    CheckResult testGetQrCodeInvalidParams(String contents,
                                           int size,
                                           String correction,
                                           String imgType,
                                           String message) {
        var url = "/api/qrcode?contents=%s&size=%d&correction=%s&type=%s"
                .formatted(encodeUrl(contents), size, correction, imgType);

        HttpResponse response = get(url).send();

        checkStatusCode(response, 400);
        checkErrorMessage(response, message);

        return CheckResult.correct();
    }

    String[] contents = {
            "text content",
            "mailto:name@company.com",
            "geo:-27.07,109.21",
            "tel:1234567890",
            "smsto:1234567890:texting!",
            "Here is some text",
            "https://hyperskill.org",
            """
            BEGIN:VCARD
            VERSION:3.0
            N:John Doe
            ORG:FAANG
            TITLE:CEO
            TEL:1234567890
            EMAIL:business@example.com
            END:VCARD"""
    };

    @DynamicTest
    DynamicTesting[] tests = {
            this::testGetHealth,

            () -> testGetQrCode(contents[1], null, null, null, "f4d19902b0ae101de9b03b8aea5556dc"),
            () -> testGetQrCode(contents[1], 200, null, null, "357759acd42e878ce86bf7f00071df7d"),
            () -> testGetQrCode(contents[1], null, "H", null, "21d1f792360f6946a7583d79e8ae18ef"),
            () -> testGetQrCode(contents[2], null, null, "gif", "af3f3319944ad1271a3d2e3e5de12a30"),
            () -> testGetQrCode(contents[3], 200, "Q", null, "a524b79ddeff57aa74357f9b608b6dff"),
            () -> testGetQrCode(contents[4], 200, null, "jpeg", "2a700a58e2b593a998e428fae8f9f4e7"),
            () -> testGetQrCode(contents[5], null, "Q", "gif", "5208d69a5c3541c16e61fb846cd82f37"),
            () -> testGetQrCode(contents[6], 200, "H", "jpeg", "69879de9db73966792bacbbe69f06146"),

            () -> testGetQrCodeInvalidParams(contents[0], 99, "L", "gif", BAD_SIZE_MSG),
            () -> testGetQrCodeInvalidParams(contents[0], 351, "L", "png", BAD_SIZE_MSG),
            () -> testGetQrCodeInvalidParams(contents[0], 451, "L", "webp", BAD_SIZE_MSG),
            () -> testGetQrCodeInvalidParams(contents[0], 200, "L", "webp", BAD_TYPE_MSG),
            () -> testGetQrCodeInvalidParams("", 200, "L", "webp", BAD_CONTENTS_MSG),
            () -> testGetQrCodeInvalidParams("   ", 500, "S", "webp", BAD_CONTENTS_MSG),
            () -> testGetQrCodeInvalidParams(contents[0], 500, "S", "webp", BAD_SIZE_MSG),
            () -> testGetQrCodeInvalidParams(contents[0], 200, "S", "webp", BAD_CORRECTION_MSG)
    };

    private void checkStatusCode(HttpResponse response, int expected) {
        var endpoint = response.getRequest().getEndpoint();
        var actual = response.getStatusCode();
        if (actual != expected) {
            throw new WrongAnswer("""
                    Request: GET %s
                    
                    Response has incorrect status code:
                    Expected %d, but responded with %d
                    
                    """.formatted(endpoint, expected, actual)
            );
        }
    }

    private void checkContentType(HttpResponse response, String imgType) {
        var endpoint = response.getRequest().getEndpoint();
        var expected = "image/" + (imgType == null ? "png" : imgType);
        var actual = response.getHeaders().get("Content-Type");
        if (!Objects.equals(expected, actual)) {
            throw new WrongAnswer("""
                    Request: GET %s
                    
                    Response has incorrect 'Content-Type' header:
                    Expected "%s" but responded with "%s"
                    
                    """.formatted(endpoint, expected, actual)
            );
        }
    }

    private void checkErrorMessage(HttpResponse response, String message) {
        var endpoint = response.getRequest().getEndpoint();
        if (!response.getJson().isJsonObject()) {
            throw new WrongAnswer("""
                    Request: GET %s
                    
                    Response contains a wrong object:
                    Expected JSON but responded with %s
                    
                    """.formatted(endpoint, response.getContent().getClass())
            );
        }

        expect(response.getContent()).asJson().check(
                isObject().value("error", isString(message))
        );
    }

    private String getMD5Hash(byte[] rawContent) {
        try {
            var md = MessageDigest.getInstance("MD5");
            var hash = md.digest(rawContent);
            var hexString = new StringBuilder();
            for (byte b : hash) {
                hexString.append("%02x".formatted(b));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    private String encodeUrl(String param) {
        return URLEncoder.encode(param, StandardCharsets.UTF_8);
    }
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/build.gradle ===
apply plugin: 'hyperskill'

subprojects {
    apply plugin: 'application'
    apply plugin: 'java'

    def userJava = Integer.parseInt(JavaVersion.current().getMajorVersion())
    def hsJava = Integer.parseInt(hs.java.version)
    def testJava = Math.max(userJava, hsJava)

    java.toolchain.languageVersion = JavaLanguageVersion.of(testJava)

    compileJava {
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(userJava)
        }
    }

    compileTestJava {
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(testJava)
        }
    }

    repositories {
        mavenCentral()
        maven { url 'https://packages.jetbrains.team/maven/p/hyperskill-hs-test/maven' }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        testImplementation 'com.github.hyperskill:hs-test:release-SNAPSHOT'
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    sourceSets {
        main.java.srcDir 'src'
        test.java.srcDir 'test'
    }

    test {
        systemProperty "file.encoding", "utf-8"
        outputs.upToDateWhen { false }
    }

    compileJava.options.encoding = 'utf-8'
    tasks.withType(JavaCompile) {
        options.encoding = 'utf-8'
    }
}

project(':util') {
    dependencies {
        implementation 'com.github.hyperskill:hs-test:release-SNAPSHOT'
    }
}

configure(subprojects.findAll {it.name != 'util'}) {
    dependencies {
        testImplementation project(':util').sourceSets.main.output
        testImplementation project(':util').sourceSets.test.output
    }
}

wrapper {
    gradleVersion = hs.gradle.version
}

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/course-info.yaml ===
type: hyperskill
title: QRCode Service
language: English
summary: "<p>This project utilizes QR codes — 2D barcodes that can store large amounts\
  \ of data and are easily read by smartphones. Through this Spring Boot project,\
  \ users can learn about the technology behind QR codes, generate them programmatically,\
  \ and integrate them into a web service.</p><br/><br/>Learn more at <a href=\"https://hyperskill.org/projects/385?utm_source=ide&utm_medium=ide&utm_campaign=ide&utm_content=project-card\"\
  >https://hyperskill.org/projects/385</a>"
programming_language: Java
programming_language_version: 11
content:
  - QRCode Service
mode: Study
yaml_version: 2

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/course-remote-info.yaml ===
hyperskill_project:
  id: 385
  ide_files: https://hyperskill.org/api/projects/385/additional-files/additional_files.json
  is_template_based: false
  use_ide: true
update_date: "Sun, 20 Apr 2025 23:22:26 UTC"
stages:
  - id: 2290
    step: 35505
    is_completed: true
  - id: 2291
    step: 35506
    is_completed: true
  - id: 2292
    step: 35507
    is_completed: true
  - id: 2293
    step: 35508
    is_completed: true
  - id: 2294
    step: 35509
    is_completed: true
topics:
  0:
    - title: "Write, compile, and run"
      theory_id: 3739
    - title: "Basic terms: JVM, JRE, JDK"
      theory_id: 3499
    - title: Operating systems
      theory_id: 9704
    - title: Command line overview
      theory_id: 8977
    - title: Parameters and options
      theory_id: 9746
    - title: IDE
      theory_id: 10996
    - title: Spring and Spring Boot frameworks
      theory_id: 7944
    - title: Getting started with Spring Boot
      theory_id: 6336
    - title: Basic project structure
      theory_id: 6339
    - title: World Wide Web
      theory_id: 6633
    - title: "HTTP: HyperText Transfer Protocol"
      theory_id: 6569
    - title: HTTP URL
      theory_id: 6740
    - title: HTTP messages
      theory_id: 6752
    - title: REST
      theory_id: 7834
    - title: Introduction to Spring Web MVC
      theory_id: 13611
    - title: Postman
      theory_id: 8512
    - title: Introduction to Java
      theory_id: 38627
    - title: "Basic literals: numbers, strings and characters"
      theory_id: 3522
    - title: Writing first program
      theory_id: 3521
    - title: Printing data
      theory_id: 3749
    - title: Types and variables
      theory_id: 3518
    - title: Comments
      theory_id: 3520
    - title: Reading user's input with Scanner
      theory_id: 9055
    - title: Coding style conventions
      theory_id: 12411
    - title: Naming variables
      theory_id: 3513
    - title: Arithmetic operations
      theory_id: 3519
    - title: Integer types and operations
      theory_id: 3565
    - title: Increment and decrement
      theory_id: 5008
    - title: Floating-point types and operations
      theory_id: 3517
    - title: Boolean type and operations. True and false
      theory_id: 3516
    - title: Comparing values. Relational operators
      theory_id: 3512
    - title: Conditional statement
      theory_id: 3503
    - title: One-line condition with ternary operator
      theory_id: 3506
    - title: For loop
      theory_id: 3505
    - title: While and do-while loops
      theory_id: 3498
    - title: Break and continue. Branching
      theory_id: 3507
    - title: Declaring methods
      theory_id: 10982
    - title: Method "main"
      theory_id: 3489
    - title: "Multiple conditions: switch"
      theory_id: 3504
    - title: Functional decomposition
      theory_id: 10570
    - title: Characters
      theory_id: 3514
    - title: String
      theory_id: 3523
    - title: What is object-oriented programming
      theory_id: 3614
    - title: Build tools
      theory_id: 4284
    - title: JAR files
      theory_id: 4311
    - title: "Gradle: overview"
      theory_id: 5075
    - title: Basic project with Gradle
      theory_id: 5077
    - title: Building apps using Gradle
      theory_id: 7917
    - title: Gradle build configuration
      theory_id: 35988
    - title: "Dependency management: repositories"
      theory_id: 37189
    - title: External resources
      theory_id: 6216
    - title: Libraries
      theory_id: 8504
    - title: Frameworks
      theory_id: 6701
    - title: What are bugs
      theory_id: 5504
    - title: Introduction to software architecture
      theory_id: 15368
    - title: YAML
      theory_id: 12722
    - title: Debugging overview
      theory_id: 14368
    - title: JSON
      theory_id: 6854
    - title: Introduction to API
      theory_id: 17007
    - title: IntelliJ IDEA
      theory_id: 37202
    - title: Run and debug with IntelliJ IDEA
      theory_id: 37206
    - title: Debugging simple constructs
      theory_id: 16479
    - title: IntelliJ IDEA run configurations
      theory_id: 10630
    - title: Getting data from REST
      theory_id: 13287
    - title: MVC
      theory_id: 17197
    - title: Defining classes
      theory_id: 3618
  1:
    - title: IoC Container
      theory_id: 16851
    - title: Spring beans
      theory_id: 14641
    - title: Spring components
      theory_id: 14652
    - title: Overloading
      theory_id: 3525
    - title: Primitive data types and their sizes
      theory_id: 3532
    - title: Type casting
      theory_id: 3510
    - title: Calling methods
      theory_id: 10973
    - title: Primitive and reference types
      theory_id: 5035
    - title: Array
      theory_id: 3511
    - title: Arrays as parameters
      theory_id: 3594
    - title: Errors in programs
      theory_id: 3536
    - title: First glance at exceptions
      theory_id: 3497
    - title: Hierarchy of exceptions
      theory_id: 3570
    - title: Exception handling
      theory_id: 3552
    - title: Concept of design patterns
      theory_id: 3611
    - title: Functional testing
      theory_id: 13438
    - title: Unit testing
      theory_id: 7545
    - title: Dependency injection
      theory_id: 20580
    - title: Class Diagrams
      theory_id: 15588
    - title: Interfaces
      theory_id: 9640
    - title: Code organization. Design principles
      theory_id: 8956
    - title: Coupling and cohesion
      theory_id: 21478
    - title: Customizing REST responses
      theory_id: 33247
    - title: Response bodies
      theory_id: 36523
    - title: Creational design patterns
      theory_id: 16251
    - title: Factory Method and Prototype
      theory_id: 16430
    - title: Instance methods
      theory_id: 3495
    - title: Grouping classes with packages
      theory_id: 3621
    - title: Initializing new instances. Constructor
      theory_id: 3535
    - title: Access modifiers
      theory_id: 3589
    - title: Getters and setters
      theory_id: 3599
    - title: Inheritance
      theory_id: 3583
    - title: Multiple constructors
      theory_id: 3538
    - title: Keyword "super"
      theory_id: 3588
  4:
    - title: Modulo division
      theory_id: 10586
    - title: Data structures
      theory_id: 40371
    - title: Abstract and concrete data structures
      theory_id: 16927
    - title: Immutability
      theory_id: 7929
    - title: Fixed-size array
      theory_id: 20078
    - title: Dynamic array
      theory_id: 5357
    - title: Iterating over arrays
      theory_id: 3602
    - title: Constants. Final variables
      theory_id: 7427
    - title: NullPointerException
      theory_id: 1945
    - title: "Hashing: overview"
      theory_id: 9831
    - title: Hash function
      theory_id: 30143
    - title: Hash table
      theory_id: 13054
    - title: Debugging methods
      theory_id: 52095
    - title: Introduction to generic programming
      theory_id: 3492
    - title: Generics and Object
      theory_id: 3493
    - title: What are collections
      theory_id: 3770
    - title: The Collections framework overview
      theory_id: 3624
    - title: ArrayList
      theory_id: 3567
    - title: The List interface
      theory_id: 3581
    - title: The Set interface
      theory_id: 3575
    - title: The Map interface
      theory_id: 3558
    - title: Introduction to HashMap
      theory_id: 25732
    - title: Protected modifier
      theory_id: 6692
    - title: Referencing subclass objects
      theory_id: 3585
    - title: Object class
      theory_id: 3596
    - title: Adding annotations
      theory_id: 3622
    - title: Objects and their properties
      theory_id: 4727
    - title: Static members
      theory_id: 3534
    - title: Method overriding
      theory_id: 3572
    - title: Polymorphism
      theory_id: 3587
    - title: Declaring functionality with interfaces
      theory_id: 3615
    - title: Wrapping classes. Boxing
      theory_id: 3595

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/gradle/wrapper/gradle-wrapper.properties ===
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.5-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/gradlew ===
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s
' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/gradlew.bat ===
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/Introduction to Spring Boot with Java/QRCode Service/settings.gradle ===
buildscript {
  repositories {
    maven { url 'https://packages.jetbrains.team/maven/p/hyperskill-hs-test/maven' }
    maven { url 'https://jitpack.io' }
  }

  dependencies {
    classpath "com.github.hyperskill:hs-gradle-plugin:release-SNAPSHOT"
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }
}

static String sanitizeName(String name) {
  return name.replaceAll("[ /\\\\:<>\"?*|()]", "_").replaceAll("(^[.]+)|([.]+\$)", "")
}

rootProject.projectDir.eachDirRecurse {
  if (!isTaskDir(it) || it.path.contains(".idea")) {
    return
  }
  def taskRelativePath = rootDir.toPath().relativize(it.toPath())
  def parts = []
  for (name in taskRelativePath) {
    parts.add(sanitizeName(name.toString()))
  }
  def moduleName =  parts.join("-")
  include "$moduleName"
  project(":$moduleName").projectDir = it
}

def isTaskDir(File dir) {
  return new File(dir, "src").exists() || new File(dir, "test").exists()
}

include 'util'

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Easy/Airline Transportation/Database.sql ===
CREATE DATABASE IF NOT EXISTS air_transportation;

USE air_transportation;

DROP TABLE IF EXISTS Pass_in_trip;
DROP TABLE IF EXISTS Trip;
DROP TABLE IF EXISTS Airline_company;
DROP TABLE IF EXISTS Passenger;

CREATE TABLE Airline_company (
    ID_comp INT PRIMARY KEY,
    company_name VARCHAR(255)
);

CREATE TABLE Trip (
    trip_no INT PRIMARY KEY,
    ID_comp INT,
    plane_type VARCHAR(255),
    town_from VARCHAR(255),
    town_to VARCHAR(255),
    time_out DATETIME,
    time_in DATETIME,
    FOREIGN KEY (ID_comp) REFERENCES Airline_company(ID_comp)
);

CREATE TABLE Passenger (
    ID_psg INT PRIMARY KEY,
    passenger_name VARCHAR(255)
);

CREATE TABLE Pass_in_trip (
    trip_no INT,
    trip_date DATETIME,
    ID_psg INT,
    seat_number CHAR(3),
    PRIMARY KEY (trip_no, trip_date, ID_psg),
    FOREIGN KEY (trip_no) REFERENCES Trip(trip_no),
    FOREIGN KEY (ID_psg) REFERENCES Passenger(ID_psg)
);


-- Inserts for Airline_Company
INSERT INTO Airline_company (ID_comp, company_name) VALUES
(1, 'Delta Airlines'),
(2, 'American Airlines'),
(3, 'United Airlines'),
(4, 'Southwest Airlines'),
(5, 'JetBlue Airways');


INSERT INTO Trip (trip_no, ID_comp, plane_type, town_from, town_to, time_out, time_in) VALUES
(1, 1, 'Boeing 737', 'New York', 'Los Angeles', '2024-02-23 08:00:00', '2024-02-23 12:00:00'),
(2, 2, 'Airbus A320', 'Los Angeles', 'Chicago', '2024-02-23 19:00:00', '2024-02-24 00:30:00'),
(3, 3, 'Boeing 777', 'Chicago', 'Dallas', '2024-02-23 15:30:00', '2024-02-23 18:45:00'),
(4, 4, 'Airbus A330', 'Dallas', 'Miami', '2024-02-23 10:45:00', '2024-02-23 14:35:00'),
(5, 5, 'Boeing 747', 'Miami', 'New York', '2024-02-23 13:30:00', '2024-02-23 17:00:00'),
(6, 1, 'Boeing 737', 'New York', 'Los Angeles', '2024-02-24 09:15:00', '2024-02-24 13:30:00'),
(7, 2, 'Airbus A320', 'Los Angeles', 'Chicago', '2024-02-24 12:30:00', '2024-02-24 16:00:00'),
(8, 3, 'Boeing 777', 'Chicago', 'Dallas', '2024-02-24 23:00:00', '2024-02-25 04:15:00'),
(9, 4, 'Airbus A330', 'Dallas', 'Miami', '2024-02-24 11:45:00', '2024-02-24 15:00:00'),
(10, 5, 'Boeing 747', 'Miami', 'New York', '2024-02-24 14:00:00', '2024-02-24 17:30:00'),
(11, 1, 'Boeing 737', 'New York', 'London', '2024-02-25 08:00:00', '2024-02-25 20:00:00'),
(12, 2, 'Airbus A320', 'Los Angeles', 'Tokyo', '2024-02-26 11:00:00', '2024-02-27 09:30:00'),
(13, 3, 'Boeing 777', 'Chicago', 'Paris', '2024-02-27 15:30:00', '2024-02-28 10:45:00'),
(14, 4, 'Airbus A330', 'Dallas', 'Sydney', '2024-02-28 10:45:00', '2024-02-29 00:15:00'),
(15, 5, 'Boeing 747', 'Miami', 'Dubai', '2024-02-29 13:30:00', '2024-03-01 23:00:00'),
(16, 3, 'Boeing 737', 'Dallas', 'Los Angeles', '2024-03-02 08:30:00', '2024-03-02 11:45:00'),
(17, 2, 'Airbus A320', 'Chicago', 'Miami', '2024-03-03 11:15:00', '2024-03-03 15:30:00'),
(18, 4, 'Boeing 777', 'New York', 'Paris', '2024-03-04 13:00:00', '2024-03-04 23:00:00'),
(19, 5, 'Boeing 747', 'Miami', 'Los Angeles', '2024-03-05 09:45:00', '2024-03-05 13:00:00'),
(20, 1, 'Airbus A330', 'Los Angeles', 'New York', '2024-03-06 15:30:00', '2024-03-06 18:45:00');


-- Insert 10 passengers
INSERT INTO Passenger (ID_psg, passenger_name) VALUES
(1, 'John Smith'),
(2, 'Mary Johnson'),
(3, 'James Williams'),
(4, 'Patricia Jones'),
(5, 'Michael Brown'),
(6, 'Jennifer Davis'),
(7, 'Richard Wilson'),
(8, 'Linda Martinez'),
(9, 'David Anderson'),
(10, 'Barbara Taylor');

INSERT INTO Pass_in_trip (trip_no, trip_date, ID_psg, seat_number) VALUES
(1, '2024-02-23 00:00:00', 1, '01A'),
(1, '2024-02-23 00:00:00', 2, '01B'),
(2, '2024-02-23 00:00:00', 3, '02C'),
(2, '2024-02-23 00:00:00', 6, '02D'),
(3, '2024-02-23 00:00:00', 5, '03A'),
(3, '2024-02-23 00:00:00', 6, '13B'),
(4, '2024-02-23 00:00:00', 7, '24C'),
(4, '2024-02-23 00:00:00', 8, '34D'),
(5, '2024-02-23 00:00:00', 9, '15A'),
(5, '2024-02-23 00:00:00', 10, '05B'),
(6, '2024-02-24 00:00:00', 1, '11A'),
(6, '2024-02-24 00:00:00', 2, '13B'),
(7, '2024-02-24 00:00:00', 2, '32C'),
(7, '2024-02-24 00:00:00', 7, '42D'),
(8, '2024-02-24 00:00:00', 1, '23A'),
(8, '2024-02-24 00:00:00', 2, '53B'),
(9, '2024-02-24 00:00:00', 1, '24C'),
(9, '2024-02-24 00:00:00', 7, '14D'),
(10, '2024-02-24 00:00:00', 1, '25A'),
(10, '2024-02-24 00:00:00', 2, '05B'),
(11, '2024-02-25 00:00:00', 1, '73B'),
(11, '2024-02-25 00:00:00', 2, '13C'),
(12, '2024-02-26 00:00:00', 2, '84C'),
(13, '2024-02-27 00:00:00', 1, '34D'),
(14, '2024-02-28 00:00:00', 6, '45A'),
(15, '2024-02-29 00:00:00', 4, '95B'),
(15, '2024-02-29 00:00:00', 6, '08A'),
(16, '2024-03-02 00:00:00', 3, '02B'),
(17, '2024-03-03 00:00:00', 1, '35D'),
(18, '2024-03-04 00:00:00', 2, '28A'),
(18, '2024-03-04 00:00:00', 1, '13A'),
(19, '2024-03-05 00:00:00', 10, '15C'),
(20, '2024-03-06 00:00:00', 6, '17B');









=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Easy/Airline Transportation/query_1.sql ===
ALTER TABLE pass_in_trip
MODIFY COLUMN trip_date DATE;

UPDATE pass_in_trip
SET trip_date = CAST(trip_date AS DATE);

SELECT trip_date
FROM pass_in_trip;

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Easy/Airline Transportation/query_2.sql ===
SELECT 
    p.passenger_name, 
    COUNT(t.trip_no) AS num_flights,
    ac.company_name
FROM passenger AS p
INNER JOIN pass_in_trip AS pit
    ON p.id_psg = pit.id_psg
INNER JOIN trip AS t
    ON t.trip_no = pit.trip_no
INNER JOIN airline_company AS ac 
    ON ac.id_comp = t.id_comp
GROUP BY 
    p.passenger_name, ac.company_name
HAVING 
    num_flights > 1;

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Easy/Airline Transportation/query_3.sql ===
SELECT 
    CONCAT(t.town_from, '-', t.town_to) AS route,
    AVG(TIMESTAMPDIFF(MINUTE, t.time_out, t.time_in)) AS avg_flight_duration,
    COUNT(pit.id_psg) AS total_passengers,
    SUM(TIMESTAMPDIFF(SECOND, t.time_out, t.time_in) / 100) AS total_income
FROM 
    passenger AS p
INNER JOIN 
    pass_in_trip AS pit ON p.id_psg = pit.id_psg
INNER JOIN 
    trip AS t ON t.trip_no = pit.trip_no
GROUP BY 
    route
ORDER BY 
    total_income DESC;

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Easy/Airline Transportation/query_4.sql ===
WITH boeing_avg_flight AS (
    SELECT
        'Boeing' AS aircraft_type,
        AVG(TIMESTAMPDIFF(MINUTE, t.time_out, t.time_in)) AS avg_flight_duration,
        COUNT(t.plane_type) AS num_flights
    FROM 
        trip AS t
    WHERE 
        t.plane_type LIKE 'Boeing%'
),
airbus_avg_flight AS (
    SELECT 
        'Airbus' AS aircraft_type,
        AVG(TIMESTAMPDIFF(MINUTE, t.time_out, t.time_in)) AS avg_flight_duration,
        COUNT(t.plane_type) AS num_flights
    FROM 
        trip AS t
    WHERE 
        t.plane_type LIKE 'Airbus%'
)
SELECT
    *
FROM
    boeing_avg_flight
UNION ALL 
SELECT
    *
FROM 
    airbus_avg_flight;

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Easy/Airline Transportation/query_5.sql ===
WITH avg_duration AS (
    SELECT 
        ac.company_name,
        t.town_from AS departure_city,
        t.town_to AS arrival_city,
        AVG(TIMESTAMPDIFF(MINUTE, t.time_out, t.time_in)) AS avg_flight_duration
    FROM 
        trip AS t
    JOIN 
        airline_company AS ac ON t.id_comp = ac.id_comp
    GROUP BY 
        ac.company_name, t.town_from, t.town_to
),
ranked_routes AS (
    SELECT 
        company_name,
        departure_city,
        arrival_city,
        avg_flight_duration,
        ROW_NUMBER() OVER (PARTITION BY company_name ORDER BY avg_flight_duration DESC) AS rn
    FROM 
        avg_duration
)
SELECT 
    company_name,
    departure_city,
    arrival_city,
    avg_flight_duration
FROM 
    ranked_routes
WHERE 
    rn <= 2;

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Easy/Airline Transportation/query_6.sql ===
WITH passenger_income_personal AS (
    SELECT 
        p.id_psg,
        p.passenger_name,
        SUM(TIMESTAMPDIFF(SECOND, t.time_out, t.time_in) * 0.01) AS passenger_income_dollars
    FROM
        passenger AS p
    JOIN 
        pass_in_trip AS pit ON pit.id_psg = p.id_psg 
    JOIN 
        trip AS t ON pit.trip_no = t.trip_no
    GROUP BY
        p.id_psg,
        p.passenger_name
),
total_income AS (
    SELECT 
        id_psg,
        passenger_name,
        passenger_income_dollars,
        SUM(passenger_income_dollars) OVER() AS total_income
    FROM 
        passenger_income_personal
    ORDER BY 
        passenger_income_dollars DESC
),
passenger_income AS (
    SELECT 
        p.id_psg,
        p.passenger_name,
        p.passenger_income_dollars,
        ROUND(
            SUM(p.passenger_income_dollars) OVER (ORDER BY p.passenger_income_dollars DESC) / total_income * 100, 
            2
        ) AS cumulative_share_percent,
        CASE 
            WHEN ROUND(SUM(p.passenger_income_dollars) OVER (ORDER BY p.passenger_income_dollars DESC) / total_income * 100, 2) <= 80 THEN 'A'
            WHEN ROUND(SUM(p.passenger_income_dollars) OVER (ORDER BY p.passenger_income_dollars DESC) / total_income * 100, 2) <= 95 THEN 'B'
            ELSE 'C'
        END AS category
    FROM 
        total_income p
)
SELECT 
    id_psg,
    passenger_name,
    passenger_income_dollars,
    cumulative_share_percent,
    category
FROM 
    passenger_income;

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Medium/Databases for Sales/Database.sql ===
CREATE TABLE IF NOT EXISTS sales (
    sale_id INT PRIMARY KEY AUTO_INCREMENT,
    sale_date DATE NOT NULL,
    customer_id INT NOT NULL,
    product_id INT NOT NULL,
    employee_id INT NOT NULL,
    quantity INT NOT NULL,
    total_price DECIMAL NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers (customer_id),
    FOREIGN KEY (product_id) REFERENCES products (product_id),
    FOREIGN KEY (employee_id) REFERENCES employees (employee_id)
);

CREATE TABLE IF NOT EXISTS manufacturers ( 
    manufacturer_id INT PRIMARY KEY AUTO_INCREMENT, 
    name VARCHAR(45) NOT NULL,
    country VARCHAR(45) NOT NULL
);

CREATE TABLE IF NOT EXISTS products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    manufacturer_id INT NOT NULL,
    model VARCHAR(45) NOT NULL,
    price DECIMAL NOT NULL,
    horsepower INT NOT NULL, 
    fuel_efficiency INT NOT NULL,
    FOREIGN KEY (manufacturer_id) REFERENCES manufacturers (manufacturer_id)
);

CREATE TABLE IF NOT EXISTS inventory (
    product_id INT PRIMARY KEY NOT NULL,
    quantity INT NOT NULL,
    reorder_level INT NOT NULL DEFAULT 2,
    last_inventory_date DATE NOT NULL,
    FOREIGN KEY (product_id) REFERENCES products (product_id)
);

CREATE TABLE IF NOT EXISTS employees (
    employee_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(45) NOT NULL,
    last_name VARCHAR(45) NOT NULL,
    position VARCHAR(45) NOT NULL,
    salary DECIMAL NOT NULL,
    address VARCHAR(45) NOT NULL,
    mobile VARCHAR(45) NOT NULL,
    is_active TINYINT NOT NULL
);

CREATE TABLE IF NOT EXISTS customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(45) NOT NULL,
    last_name VARCHAR(45) NOT NULL,
    address VARCHAR(45) NOT NULL,
    city VARCHAR(45) NOT NULL,
    `state` VARCHAR(45) NOT NULL
);

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Medium/Databases for Sales/query_1.sql ===
CREATE TRIGGER update_inventory
BEFORE INSERT ON sales 
FOR EACH ROW 
BEGIN
    UPDATE inventory
    SET 
        quantity = quantity - NEW.quantity,
        last_inventory_date = NEW.sale_date
    WHERE product_id = NEW.product_id;
END; 

INSERT INTO sales (sale_date, customer_id, product_id, employee_id, quantity, total_price) 
VALUES
    ('2023-05-01', 1, 1, 1, 2, 56000.00),
    ('2023-05-02', 2, 2, 1, 1, 22000.00),
    ('2023-05-02', 1, 3, 2, 1, 41250.00),
    ('2023-05-03', 2, 4, 2, 2, 60000.00),
    ('2023-05-03', 1, 1, 2, 3, 84000.00);


SELECT * FROM inventory;

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Medium/Databases for Sales/query_2.sql ===
CREATE INDEX customer_sales_product
ON sales(customer_id, product_id); 

CREATE VIEW sales_summary AS 
SELECT
    p.model,
    SUM(s.quantity) AS total_sold
FROM 
    sales s 
JOIN 
    products p ON s.product_id = p.product_id
GROUP BY 
    p.model;


SELECT * FROM sales_summary;

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Medium/Databases for Sales/query_3.sql ===
SELECT 
    CONCAT_WS(" ", e.first_name, e.last_name) AS employee_name,
    e.position, 
    DATE_FORMAT(s.sale_date, '%M %Y') AS month_year,
    CASE
        WHEN SUM(s.total_price) / total_month.total_sum * 100 < 5 THEN 0
        WHEN SUM(s.total_price) / total_month.total_sum * 100 BETWEEN 5 AND 10 THEN 2000
        WHEN SUM(s.total_price) / total_month.total_sum * 100 BETWEEN 10 AND 20 THEN 5000
        WHEN SUM(s.total_price) / total_month.total_sum * 100 BETWEEN 20 AND 30 THEN 10000
        WHEN SUM(s.total_price) / total_month.total_sum * 100 BETWEEN 30 AND 40 THEN 15000
        ELSE 25000
    END AS employee_bonus
FROM
    sales s
JOIN
    employees e ON s.employee_id = e.employee_id
JOIN
    (
        SELECT 
            DATE_FORMAT(sale_date, '%Y-%m') AS month,
            SUM(total_price) AS total_sum
        FROM
            sales 
        GROUP BY
            DATE_FORMAT(sale_date, '%Y-%m')
    ) AS total_month ON DATE_FORMAT(s.sale_date, '%Y-%m') = total_month.month
WHERE
    e.position = 'Sales Associate'  GROUP BY
    s.employee_id,
    employee_name,
    e.position,
    month_year,
    total_month.total_sum
ORDER BY
    employee_bonus;

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Medium/Databases for Sales/query_4.sql ===
SELECT 
    p.model,
    p.price,
    SUM(s.total_price) AS total_sale_per_model,
    i.quantity AS inventory_per_model,
    SUM(s.total_price) / i.quantity AS sales_inventory_ratio
FROM
    products p
JOIN
    sales s ON p.product_id = s.product_id
JOIN 
    inventory i ON p.product_id = i.product_id
GROUP BY 
    p.model, p.price, i.quantity
ORDER BY
    sales_inventory_ratio DESC;

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Medium/Payroll Management Database/query_1.sql ===
CREATE PROCEDURE GetEmployeesByDept(
    IN department_name VARCHAR(45)
)
BEGIN 
    SELECT 
        e.first_name,
        e.last_name,
        j.title AS job_title
    FROM 
        employees e
    JOIN 
        departments d ON e.department_id = d.id 
    JOIN 
        jobs j ON e.job_id = j.id
    WHERE
        d.name = department_name
    ORDER BY 
        e.first_name;
END;

CALL GetEmployeesByDept("Office of Finance");

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Medium/Payroll Management Database/query_2.sql ===
CREATE PROCEDURE EmployeeTotalPay(
    IN first_name VARCHAR(45),
    IN last_name VARCHAR(45),
    IN total_hours INT,
    IN normal_hours INT,
    IN overtime_rate FLOAT,
    IN max_overtime_pay FLOAT,
    OUT total_pay FLOAT
)
BEGIN
    DECLARE hourly_rate FLOAT;
    DECLARE job_type VARCHAR(45);
    
    SELECT j.hourly_rate, j.type INTO hourly_rate, job_type
    FROM employees e
    JOIN jobs j ON e.job_id = j.id
    WHERE e.first_name = first_name AND e.last_name = last_name;
    
    IF job_type = 'Part Time' THEN
        SET total_pay = hourly_rate * total_hours;
    ELSE
        IF total_hours <= normal_hours THEN
            SET total_pay = hourly_rate * total_hours;
        ELSE
            SET total_pay = hourly_rate * normal_hours + 
                  LEAST((total_hours - normal_hours) * hourly_rate * overtime_rate, max_overtime_pay);
        END IF;
    END IF;
END;

CALL EmployeeTotalPay('Philip', 'Wilson', 2160, 2080, 1.5, 6000, @philip_pay);
CALL EmployeeTotalPay('Daisy', 'Diamond', 2100, 2080, 1.5, 6000, @daisy_pay);

SELECT 
    ROUND(@philip_pay, 1) AS 'Philip Wilson',
    ROUND(@daisy_pay, 1) AS 'Daisy Diamond';

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Medium/Payroll Management Database/query_3.sql ===
CREATE PROCEDURE EmployeeTotalPay(
    IN first_name VARCHAR(45),
    IN last_name VARCHAR(45),
    IN total_hours INT,
    IN normal_hours INT,
    IN overtime_rate FLOAT,
    IN max_overtime_pay FLOAT,
    OUT total_pay FLOAT
)
BEGIN
    DECLARE hourly_rate FLOAT;
    DECLARE job_type VARCHAR(45);
    
    SELECT j.hourly_rate, j.type INTO hourly_rate, job_type
    FROM employees e
    JOIN jobs j ON e.job_id = j.id
    WHERE e.first_name = first_name AND e.last_name = last_name;
    
    IF job_type = 'Part Time' THEN
        SET total_pay = hourly_rate * total_hours;
    ELSE
        IF total_hours <= normal_hours THEN
            SET total_pay = hourly_rate * total_hours;
        ELSE
            SET total_pay = hourly_rate * normal_hours + 
                  LEAST((total_hours - normal_hours) * hourly_rate * overtime_rate, max_overtime_pay);
        END IF;
    END IF;
END;

CALL EmployeeTotalPay('Philip', 'Wilson', 2160, 2080, 1.5, 6000, @philip_pay);
CALL EmployeeTotalPay('Daisy', 'Diamond', 2100, 2080, 1.5, 6000, @daisy_pay);


DELIMITER //

CREATE FUNCTION TaxOwed(taxable_income FLOAT) RETURNS FLOAT
BEGIN
    DECLARE tax_owed FLOAT;
    
    SET tax_owed = CASE
        WHEN taxable_income <= 11000 THEN taxable_income * 0.10
        WHEN taxable_income <= 44725 THEN 1100 + (taxable_income - 11000) * 0.12
        WHEN taxable_income <= 95375 THEN 5147 + (taxable_income - 44725) * 0.22
        WHEN taxable_income <= 182100 THEN 16290 + (taxable_income - 95375) * 0.24
        WHEN taxable_income <= 231250 THEN 37104 + (taxable_income - 182100) * 0.32
        WHEN taxable_income <= 578125 THEN 52832 + (taxable_income - 231250) * 0.35
        ELSE 174238.25 + (taxable_income - 578125) * 0.37
    END;
    
    RETURN tax_owed;
END //

DELIMITER ;

SELECT 
    ROUND(TaxOwed(@philip_pay), 1) AS 'Philip Wilson',
    ROUND(TaxOwed(@daisy_pay), 1) AS 'Daisy Diamond';

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/SQL for Backend Developers/Medium/Payroll Management Database/query_4.sql ===
DELIMITER //

CREATE PROCEDURE EmployeePay(
    IN first_name VARCHAR(45),
    IN last_name VARCHAR(45),
    IN total_hours INT,
    IN normal_hours INT,
    IN overtime_rate FLOAT(8, 2),
    IN max_overtime_pay FLOAT(8, 2),
    OUT base_pay FLOAT(8, 2),
    OUT total_pay FLOAT(8, 2)
)
BEGIN
    DECLARE hourly_rate FLOAT(8, 2);
    DECLARE job_type VARCHAR(45);
    
    SELECT j.hourly_rate, j.type INTO hourly_rate, job_type
    FROM employees e
    JOIN jobs j ON e.job_id = j.id
    WHERE e.first_name = first_name AND e.last_name = last_name;
    
    IF job_type = 'Part Time' OR total_hours <= normal_hours THEN
        SET base_pay = hourly_rate * total_hours;
        SET total_pay = hourly_rate * total_hours;
    ELSE
        SET base_pay = hourly_rate * normal_hours;
        SET total_pay = hourly_rate * normal_hours + 
              LEAST((total_hours - normal_hours) * hourly_rate * overtime_rate, max_overtime_pay);
    END IF;
END //

DELIMITER ;

DELIMITER //

CREATE FUNCTION TaxOwed(taxable_income FLOAT(8, 2)) RETURNS FLOAT(8, 2)
BEGIN
    DECLARE tax_owed FLOAT(8, 2);
    
    SET tax_owed = CASE
        WHEN taxable_income <= 11000 THEN taxable_income * 0.10
        WHEN taxable_income <= 44725 THEN 1100 + (taxable_income - 11000) * 0.12
        WHEN taxable_income <= 95375 THEN 5147 + (taxable_income - 44725) * 0.22
        WHEN taxable_income <= 182100 THEN 16290 + (taxable_income - 95375) * 0.24
        WHEN taxable_income <= 231250 THEN 37104 + (taxable_income - 182100) * 0.32
        WHEN taxable_income <= 578125 THEN 52832 + (taxable_income - 231250) * 0.35
        ELSE 174238.25 + (taxable_income - 578125) * 0.37
    END;
    
    RETURN tax_owed;
END //

DELIMITER ;

CREATE TEMPORARY TABLE employee_hours (
    employee_name VARCHAR(100),
    hours_worked INT
);

INSERT INTO employee_hours VALUES
    ("Dixie Herda", 2095),
    ("Stephen West", 2091),
    ("Philip Wilson", 2160), 
    ("Robin Walker", 2083),
    ("Antoinette Matava", 2115),
    ("Courtney Walker", 2206),
    ("Gladys Bosch", 2090);

DELIMITER //

CREATE PROCEDURE PayrollReport(IN department_name VARCHAR(45))
BEGIN
        CREATE TEMPORARY TABLE IF NOT EXISTS temp_report (
        full_names VARCHAR(100),
        base_pay FLOAT(8, 2),
        overtime_pay FLOAT(8, 2),
        total_pay FLOAT(8, 2),
        tax_owed FLOAT(8, 2),
        net_income FLOAT(8, 2)
    );

        TRUNCATE TABLE temp_report;

        INSERT INTO temp_report (full_names, base_pay, overtime_pay, total_pay, tax_owed, net_income)
    SELECT 
        CONCAT_WS(' ', e.first_name, e.last_name),
        j.hourly_rate * LEAST(eh.hours_worked, 2080),
        CASE 
            WHEN j.type = 'Full Time' AND eh.hours_worked > 2080 
            THEN LEAST((eh.hours_worked - 2080) * j.hourly_rate * 1.5, 6000)
            ELSE 0 
        END,
        (j.hourly_rate * LEAST(eh.hours_worked, 2080)) + 
        CASE 
            WHEN j.type = 'Full Time' AND eh.hours_worked > 2080 
            THEN LEAST((eh.hours_worked - 2080) * j.hourly_rate * 1.5, 6000)
            ELSE 0 
        END,
        TaxOwed((j.hourly_rate * LEAST(eh.hours_worked, 2080)) + 
               CASE 
                   WHEN j.type = 'Full Time' AND eh.hours_worked > 2080 
                   THEN LEAST((eh.hours_worked - 2080) * j.hourly_rate * 1.5, 6000)
                   ELSE 0 
               END),
        (j.hourly_rate * LEAST(eh.hours_worked, 2080)) + 
        CASE 
            WHEN j.type = 'Full Time' AND eh.hours_worked > 2080 
            THEN LEAST((eh.hours_worked - 2080) * j.hourly_rate * 1.5, 6000)
            ELSE 0 
        END - TaxOwed((j.hourly_rate * LEAST(eh.hours_worked, 2080)) + 
                    CASE 
                        WHEN j.type = 'Full Time' AND eh.hours_worked > 2080 
                        THEN LEAST((eh.hours_worked - 2080) * j.hourly_rate * 1.5, 6000)
                        ELSE 0 
                    END)
    FROM 
        employees e
    JOIN departments d ON e.department_id = d.id
    JOIN jobs j ON e.job_id = j.id
    JOIN employee_hours eh ON CONCAT_WS(' ', e.first_name, e.last_name) = eh.employee_name
    WHERE 
        d.name = department_name;

        SELECT * FROM temp_report ORDER BY net_income DESC;

        DROP TEMPORARY TABLE temp_report;
END //

DELIMITER ;

CALL PayrollReport("City Ethics Commission");

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/scr.bash ===
#!/bin/bash

# Переменная для хранения имени выходного файла
OUTPUT_FILE="directory_structure.txt"

# Вывод структуры текущей директории с помощью ls -a и tree -a
{
  echo "=== Структура каталога (ls -a) ==="
  ls -a
  echo ""
  
  echo "=== Структура каталога (tree -a) ==="
  tree -a
  echo ""
} > "$OUTPUT_FILE"

# Рекурсивный проход по всем файлам и каталогам в текущей директории
find "$(pwd)" -type f | while read -r file; do
  # Проверяем, является ли файл небинарным
  if file "$file" | grep -q "text"; then
    {
      echo "=== Содержимое файла: $file ==="
      cat "$file"
      echo ""
    } >> "$OUTPUT_FILE"
  fi
done

echo "Результат записан в файл $OUTPUT_FILE"

=== Содержимое файла: /home/gs0xa19f2/Documents/Hyperskill/directory_structure.txt ===

